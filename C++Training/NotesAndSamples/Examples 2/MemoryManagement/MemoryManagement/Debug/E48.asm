; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Ali\Samples\C++\Examples 2\MemoryManagement\MemoryManagement\E48.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?managed@Ex48@@3UManaged@1@A			; Ex48::managed
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
_BSS	SEGMENT
?managed@Ex48@@3UManaged@1@A DB 01H DUP (?)		; Ex48::managed
_BSS	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??1?$Ptr@USA@Ex48@@@Ex48@@QAE@XZ		; Ex48::Ptr<Ex48::SA>::~Ptr<Ex48::SA>
PUBLIC	??1?$Ptr@N@Ex48@@QAE@XZ				; Ex48::Ptr<double>::~Ptr<double>
PUBLIC	?Collect@GC@Ex48@@SAXH@Z			; Ex48::GC::Collect
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_C@_0BN@PMKLIPOD@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$AA@ ; `string'
PUBLIC	??1SA@Ex48@@QAE@XZ				; Ex48::SA::~SA
PUBLIC	??0?$Ptr@N@Ex48@@QAE@PAN@Z			; Ex48::Ptr<double>::Ptr<double>
PUBLIC	__real@0000000000000000
PUBLIC	??0?$Ptr@USA@Ex48@@@Ex48@@QAE@PAUSA@1@@Z	; Ex48::Ptr<Ex48::SA>::Ptr<Ex48::SA>
PUBLIC	??0SA@Ex48@@QAE@XZ				; Ex48::SA::SA
PUBLIC	??1?$Ptr@H@Ex48@@QAE@XZ				; Ex48::Ptr<int>::~Ptr<int>
PUBLIC	??1?$Ptr@D@Ex48@@QAE@XZ				; Ex48::Ptr<char>::~Ptr<char>
PUBLIC	??0?$Ptr@D@Ex48@@QAE@PAD@Z			; Ex48::Ptr<char>::Ptr<char>
PUBLIC	??0?$Ptr@H@Ex48@@QAE@PAH@Z			; Ex48::Ptr<int>::Ptr<int>
PUBLIC	?main48@@YAXXZ					; main48
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_0BN@PMKLIPOD@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$AA@
; File c:\ali\samples\c++\examples 2\memorymanagement\memorymanagement\e48.cpp
CONST	SEGMENT
??_C@_0BN@PMKLIPOD@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$AA@ DB '*'
	DB	'***************************', 00H		; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?main48@@YAXXZ DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?main48@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?main48@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$4
	DD	03H
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$5
	DD	04H
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$6
	DD	05H
	DD	FLAT:__unwindfunclet$?main48@@YAXXZ$7
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?main48@@YAXXZ
_TEXT	SEGMENT
tv167 = -412						; size = 4
tv156 = -412						; size = 4
tv147 = -412						; size = 4
tv138 = -412						; size = 4
tv129 = -412						; size = 4
tv88 = -412						; size = 4
tv79 = -412						; size = 4
tv70 = -412						; size = 4
$T41725 = -404						; size = 4
$T41728 = -392						; size = 4
$T41731 = -380						; size = 4
$T41734 = -368						; size = 4
$T41737 = -356						; size = 4
$T41740 = -344						; size = 4
$T41743 = -332						; size = 4
$T41746 = -320						; size = 4
_p5$ = -116						; size = 4
_p4$ = -104						; size = 4
_naked$ = -92						; size = 4
_p3$ = -80						; size = 4
_p7$ = -68						; size = 4
_p6$33044 = -56						; size = 4
_p2$33040 = -44						; size = 4
_p8$ = -32						; size = 4
_p1$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?main48@@YAXXZ PROC					; main48, COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?main48@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-412]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 155  : 	Ptr<int> p1 = new(managed) int();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	4
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41725[ebp], eax
	cmp	DWORD PTR $T41725[ebp], 0
	je	SHORT $LN3@main48
	mov	ecx, DWORD PTR $T41725[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T41725[ebp]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@main48
$LN3@main48:
	mov	DWORD PTR tv70[ebp], 0
$LN4@main48:
	mov	eax, DWORD PTR tv70[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$[ebp]
	call	??0?$Ptr@H@Ex48@@QAE@PAH@Z		; Ex48::Ptr<int>::Ptr<int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 156  : 
; 157  : 	Ptr<char> p8 = new(managed) char();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	1
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41728[ebp], eax
	cmp	DWORD PTR $T41728[ebp], 0
	je	SHORT $LN5@main48
	mov	ecx, DWORD PTR $T41728[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR $T41728[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN6@main48
$LN5@main48:
	mov	DWORD PTR tv79[ebp], 0
$LN6@main48:
	mov	eax, DWORD PTR tv79[ebp]
	push	eax
	lea	ecx, DWORD PTR _p8$[ebp]
	call	??0?$Ptr@D@Ex48@@QAE@PAD@Z		; Ex48::Ptr<char>::Ptr<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 158  : 
; 159  : 	{
; 160  : 		Ptr<int> p2 = new(managed) int();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	4
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41731[ebp], eax
	cmp	DWORD PTR $T41731[ebp], 0
	je	SHORT $LN7@main48
	mov	ecx, DWORD PTR $T41731[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T41731[ebp]
	mov	DWORD PTR tv88[ebp], edx
	jmp	SHORT $LN8@main48
$LN7@main48:
	mov	DWORD PTR tv88[ebp], 0
$LN8@main48:
	mov	eax, DWORD PTR tv88[ebp]
	push	eax
	lea	ecx, DWORD PTR _p2$33040[ebp]
	call	??0?$Ptr@H@Ex48@@QAE@PAH@Z		; Ex48::Ptr<int>::Ptr<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 161  : 		Ptr<char> p6 = new(managed) char();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	1
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41734[ebp], eax
	cmp	DWORD PTR $T41734[ebp], 0
	je	SHORT $LN9@main48
	mov	ecx, DWORD PTR $T41734[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR $T41734[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@main48
$LN9@main48:
	mov	DWORD PTR tv129[ebp], 0
$LN10@main48:
	mov	eax, DWORD PTR tv129[ebp]
	push	eax
	lea	ecx, DWORD PTR _p6$33044[ebp]
	call	??0?$Ptr@D@Ex48@@QAE@PAD@Z		; Ex48::Ptr<char>::Ptr<char>

; 162  : 	}

	lea	ecx, DWORD PTR _p6$33044[ebp]
	call	??1?$Ptr@D@Ex48@@QAE@XZ			; Ex48::Ptr<char>::~Ptr<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _p2$33040[ebp]
	call	??1?$Ptr@H@Ex48@@QAE@XZ			; Ex48::Ptr<int>::~Ptr<int>

; 163  : 
; 164  : 	Ptr<char> p7 = new(managed) char();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	1
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41737[ebp], eax
	cmp	DWORD PTR $T41737[ebp], 0
	je	SHORT $LN11@main48
	mov	ecx, DWORD PTR $T41737[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR $T41737[ebp]
	mov	DWORD PTR tv138[ebp], edx
	jmp	SHORT $LN12@main48
$LN11@main48:
	mov	DWORD PTR tv138[ebp], 0
$LN12@main48:
	mov	eax, DWORD PTR tv138[ebp]
	push	eax
	lea	ecx, DWORD PTR _p7$[ebp]
	call	??0?$Ptr@D@Ex48@@QAE@PAD@Z		; Ex48::Ptr<char>::Ptr<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 165  : 
; 166  : 	Ptr<int> p3 = new(managed) int();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	4
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41740[ebp], eax
	cmp	DWORD PTR $T41740[ebp], 0
	je	SHORT $LN13@main48
	mov	ecx, DWORD PTR $T41740[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR $T41740[ebp]
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN14@main48
$LN13@main48:
	mov	DWORD PTR tv147[ebp], 0
$LN14@main48:
	mov	eax, DWORD PTR tv147[ebp]
	push	eax
	lea	ecx, DWORD PTR _p3$[ebp]
	call	??0?$Ptr@H@Ex48@@QAE@PAH@Z		; Ex48::Ptr<int>::Ptr<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 167  : 
; 168  : 
; 169  : 	SA* naked= new(managed) SA();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	1
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41743[ebp], eax
	cmp	DWORD PTR $T41743[ebp], 0
	je	SHORT $LN15@main48
	mov	ecx, DWORD PTR $T41743[ebp]
	call	??0SA@Ex48@@QAE@XZ			; Ex48::SA::SA
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN16@main48
$LN15@main48:
	mov	DWORD PTR tv156[ebp], 0
$LN16@main48:
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR _naked$[ebp], ecx

; 170  : 	Ptr<SA> p4 =naked; 

	mov	eax, DWORD PTR _naked$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p4$[ebp]
	call	??0?$Ptr@USA@Ex48@@@Ex48@@QAE@PAUSA@1@@Z ; Ex48::Ptr<Ex48::SA>::Ptr<Ex48::SA>
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 171  : 
; 172  : 	Ptr<double> p5= new(managed) double();

	movzx	eax, BYTE PTR ?managed@Ex48@@3UManaged@1@A ; Ex48::managed
	push	eax
	push	8
	call	??2@YAPAXIUManaged@Ex48@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T41746[ebp], eax
	cmp	DWORD PTR $T41746[ebp], 0
	je	SHORT $LN17@main48
	mov	ecx, DWORD PTR $T41746[ebp]
	fldz
	fstp	QWORD PTR [ecx]
	mov	edx, DWORD PTR $T41746[ebp]
	mov	DWORD PTR tv167[ebp], edx
	jmp	SHORT $LN18@main48
$LN17@main48:
	mov	DWORD PTR tv167[ebp], 0
$LN18@main48:
	mov	eax, DWORD PTR tv167[ebp]
	push	eax
	lea	ecx, DWORD PTR _p5$[ebp]
	call	??0?$Ptr@N@Ex48@@QAE@PAN@Z		; Ex48::Ptr<double>::Ptr<double>
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 173  : 
; 174  : 
; 175  : 	naked->SA::~SA();

	mov	ecx, DWORD PTR _naked$[ebp]
	call	??1SA@Ex48@@QAE@XZ			; Ex48::SA::~SA

; 176  : 	cout<<"****************************"<<endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_0BN@PMKLIPOD@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  : 	GC::Collect(0); 

	push	0
	call	?Collect@GC@Ex48@@SAXH@Z		; Ex48::GC::Collect
	add	esp, 4

; 178  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _p5$[ebp]
	call	??1?$Ptr@N@Ex48@@QAE@XZ			; Ex48::Ptr<double>::~Ptr<double>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _p4$[ebp]
	call	??1?$Ptr@USA@Ex48@@@Ex48@@QAE@XZ	; Ex48::Ptr<Ex48::SA>::~Ptr<Ex48::SA>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _p3$[ebp]
	call	??1?$Ptr@H@Ex48@@QAE@XZ			; Ex48::Ptr<int>::~Ptr<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _p7$[ebp]
	call	??1?$Ptr@D@Ex48@@QAE@XZ			; Ex48::Ptr<char>::~Ptr<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _p8$[ebp]
	call	??1?$Ptr@D@Ex48@@QAE@XZ			; Ex48::Ptr<char>::~Ptr<char>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _p1$[ebp]
	call	??1?$Ptr@H@Ex48@@QAE@XZ			; Ex48::Ptr<int>::~Ptr<int>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@main48
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 412				; 0000019cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN37@main48:
	DD	8
	DD	$LN36@main48
$LN36@main48:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN27@main48
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN28@main48
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN29@main48
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN30@main48
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN31@main48
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN32@main48
	DD	-104					; ffffff98H
	DD	4
	DD	$LN33@main48
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN34@main48
$LN34@main48:
	DB	112					; 00000070H
	DB	53					; 00000035H
	DB	0
$LN33@main48:
	DB	112					; 00000070H
	DB	52					; 00000034H
	DB	0
$LN32@main48:
	DB	112					; 00000070H
	DB	51					; 00000033H
	DB	0
$LN31@main48:
	DB	112					; 00000070H
	DB	55					; 00000037H
	DB	0
$LN30@main48:
	DB	112					; 00000070H
	DB	54					; 00000036H
	DB	0
$LN29@main48:
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN28@main48:
	DB	112					; 00000070H
	DB	56					; 00000038H
	DB	0
$LN27@main48:
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?main48@@YAXXZ$0:
	lea	ecx, DWORD PTR _p1$[ebp]
	jmp	??1?$Ptr@H@Ex48@@QAE@XZ			; Ex48::Ptr<int>::~Ptr<int>
__unwindfunclet$?main48@@YAXXZ$1:
	lea	ecx, DWORD PTR _p8$[ebp]
	jmp	??1?$Ptr@D@Ex48@@QAE@XZ			; Ex48::Ptr<char>::~Ptr<char>
__unwindfunclet$?main48@@YAXXZ$2:
	lea	ecx, DWORD PTR _p2$33040[ebp]
	jmp	??1?$Ptr@H@Ex48@@QAE@XZ			; Ex48::Ptr<int>::~Ptr<int>
__unwindfunclet$?main48@@YAXXZ$4:
	lea	ecx, DWORD PTR _p7$[ebp]
	jmp	??1?$Ptr@D@Ex48@@QAE@XZ			; Ex48::Ptr<char>::~Ptr<char>
__unwindfunclet$?main48@@YAXXZ$5:
	lea	ecx, DWORD PTR _p3$[ebp]
	jmp	??1?$Ptr@H@Ex48@@QAE@XZ			; Ex48::Ptr<int>::~Ptr<int>
__unwindfunclet$?main48@@YAXXZ$6:
	lea	ecx, DWORD PTR _p4$[ebp]
	jmp	??1?$Ptr@USA@Ex48@@@Ex48@@QAE@XZ	; Ex48::Ptr<Ex48::SA>::~Ptr<Ex48::SA>
__unwindfunclet$?main48@@YAXXZ$7:
	lea	ecx, DWORD PTR _p5$[ebp]
	jmp	??1?$Ptr@N@Ex48@@QAE@XZ			; Ex48::Ptr<double>::~Ptr<double>
__ehhandler$?main48@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-416]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?main48@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?main48@@YAXXZ ENDP					; main48
PUBLIC	??_C@_0L@PEIFCNOG@SA?5created?$AA@		; `string'
;	COMDAT ??_C@_0L@PEIFCNOG@SA?5created?$AA@
CONST	SEGMENT
??_C@_0L@PEIFCNOG@SA?5created?$AA@ DB 'SA created', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0SA@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SA@Ex48@@QAE@XZ PROC					; Ex48::SA::SA, COMDAT
; _this$ = ecx

; 12   : 		SA()	{ cout<<"SA created"<<endl;	}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_0L@PEIFCNOG@SA?5created?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SA@Ex48@@QAE@XZ ENDP					; Ex48::SA::SA
_TEXT	ENDS
PUBLIC	??_C@_09KDBKJCNL@Destroyed?$AA@			; `string'
;	COMDAT ??_C@_09KDBKJCNL@Destroyed?$AA@
CONST	SEGMENT
??_C@_09KDBKJCNL@Destroyed?$AA@ DB 'Destroyed', 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??1SA@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SA@Ex48@@QAE@XZ PROC					; Ex48::SA::~SA, COMDAT
; _this$ = ecx

; 13   : 		~SA() { cout<<"Destroyed"<<endl;	}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	push	OFFSET ??_C@_09KDBKJCNL@Destroyed?$AA@
	mov	ecx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	ecx
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SA@Ex48@@QAE@XZ ENDP					; Ex48::SA::~SA
_TEXT	ENDS
PUBLIC	??_GGeneration@Ex48@@QAEPAXI@Z			; Ex48::Generation::`scalar deleting destructor'
PUBLIC	??_C@_07JIGNKHIP@object?5?$AA@			; `string'
PUBLIC	??_C@_0BG@GPLKKPEF@?5survived?5?$CG?5moved?5to?5?$AA@ ; `string'
PUBLIC	?Allocate@HeapManager@Ex48@@SAPAXI@Z		; Ex48::HeapManager::Allocate
PUBLIC	??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::operator[]
PUBLIC	??A?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEAAPAPAXI@Z ; std::vector<void * *,std::allocator<void * *> >::operator[]
PUBLIC	?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::size
PUBLIC	?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size
PUBLIC	??A?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEAAPAVGeneration@Ex48@@I@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::operator[]
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_07JIGNKHIP@object?5?$AA@
CONST	SEGMENT
??_C@_07JIGNKHIP@object?5?$AA@ DB 'object ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GPLKKPEF@?5survived?5?$CG?5moved?5to?5?$AA@
CONST	SEGMENT
??_C@_0BG@GPLKKPEF@?5survived?5?$CG?5moved?5to?5?$AA@ DB ' survived & mov'
	DB	'ed to ', 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Collect@GC@Ex48@@SAXH@Z
_TEXT	SEGMENT
tv149 = -292						; size = 4
$T41797 = -284						; size = 4
$T41798 = -272						; size = 4
_mem$32977 = -68					; size = 4
_pobj$32975 = -56					; size = 4
_p$32974 = -44						; size = 4
_j$32970 = -32						; size = 4
_i$32966 = -20						; size = 4
_g$ = -8						; size = 4
_no$ = 8						; size = 4
?Collect@GC@Ex48@@SAXH@Z PROC				; Ex48::GC::Collect, COMDAT

; 117  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 118  : 			//pick the generation
; 119  : 			Generation* g = HeapManager::gen[no];

	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	??A?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEAAPAVGeneration@Ex48@@I@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _g$[ebp], ecx

; 120  : 
; 121  : 			//traverse all objects in g
; 122  : 			for(int i= 0;i < g->objects.size();i++)

	mov	DWORD PTR _i$32966[ebp], 0
	jmp	SHORT $LN7@Collect
$LN6@Collect:
	mov	eax, DWORD PTR _i$32966[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32966[ebp], eax
$LN7@Collect:
	mov	ecx, DWORD PTR _g$[ebp]
	add	ecx, 24					; 00000018H
	call	?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size
	cmp	DWORD PTR _i$32966[ebp], eax
	jae	$LN5@Collect

; 123  : 			{
; 124  : 				//traverse all pointers on stack
; 125  : 				for(int j=0; j < stack.size(); j++) 

	mov	DWORD PTR _j$32970[ebp], 0
	jmp	SHORT $LN4@Collect
$LN3@Collect:
	mov	eax, DWORD PTR _j$32970[ebp]
	add	eax, 1
	mov	DWORD PTR _j$32970[ebp], eax
$LN4@Collect:
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::size
	cmp	DWORD PTR _j$32970[ebp], eax
	jae	$LN2@Collect

; 126  : 				{
; 127  : 					void** p = stack[j]; 

	mov	eax, DWORD PTR _j$32970[ebp]
	push	eax
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	??A?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEAAPAPAXI@Z ; std::vector<void * *,std::allocator<void * *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$32974[ebp], ecx

; 128  : 					void*  pobj = g->objects[i].Address;

	mov	eax, DWORD PTR _i$32966[ebp]
	push	eax
	mov	ecx, DWORD PTR _g$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pobj$32975[ebp], ecx

; 129  : 					//check if the stack pointer is pointing the current heap object	
; 130  : 					if(*p == pobj)

	mov	eax, DWORD PTR _p$32974[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _pobj$32975[ebp]
	jne	$LN1@Collect

; 131  : 					{
; 132  : 						//move to a different memory
; 133  : 						void* mem =  HeapManager::Allocate(g->objects[i].size); 

	mov	eax, DWORD PTR _i$32966[ebp]
	push	eax
	mov	ecx, DWORD PTR _g$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?Allocate@HeapManager@Ex48@@SAPAXI@Z	; Ex48::HeapManager::Allocate
	add	esp, 4
	mov	DWORD PTR _mem$32977[ebp], eax

; 134  : 						memcpy(mem,pobj,g->objects[i].size);

	mov	eax, DWORD PTR _i$32966[ebp]
	push	eax
	mov	ecx, DWORD PTR _g$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pobj$32975[ebp]
	push	edx
	mov	eax, DWORD PTR _mem$32977[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 135  : 						//update all stack pointes
; 136  : 						*p = mem; //1

	mov	eax, DWORD PTR _p$32974[ebp]
	mov	ecx, DWORD PTR _mem$32977[ebp]
	mov	DWORD PTR [eax], ecx

; 137  : 						cout<<"object "<<pobj<<" survived & moved to "<<mem<<endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _mem$32977[ebp]
	push	ecx
	push	OFFSET ??_C@_0BG@GPLKKPEF@?5survived?5?$CG?5moved?5to?5?$AA@
	mov	ebx, esp
	mov	edx, DWORD PTR _pobj$32975[ebp]
	push	edx
	push	OFFSET ??_C@_07JIGNKHIP@object?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Collect:

; 138  : 					}
; 139  : 				}

	jmp	$LN3@Collect
$LN2@Collect:

; 140  : 			}

	jmp	$LN6@Collect
$LN5@Collect:

; 141  : 			delete g;

	mov	eax, DWORD PTR _g$[ebp]
	mov	DWORD PTR $T41798[ebp], eax
	mov	ecx, DWORD PTR $T41798[ebp]
	mov	DWORD PTR $T41797[ebp], ecx
	cmp	DWORD PTR $T41797[ebp], 0
	je	SHORT $LN10@Collect
	push	1
	mov	ecx, DWORD PTR $T41797[ebp]
	call	??_GGeneration@Ex48@@QAEPAXI@Z
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN8@Collect
$LN10@Collect:
	mov	DWORD PTR tv149[ebp], 0
$LN8@Collect:

; 142  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Collect@GC@Ex48@@SAXH@Z ENDP				; Ex48::GC::Collect
_TEXT	ENDS
PUBLIC	?Allocate@Generation@Ex48@@QAEPAXI@Z		; Ex48::Generation::Allocate
PUBLIC	?push_back@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXABQAVGeneration@Ex48@@@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::push_back
PUBLIC	??0Generation@Ex48@@QAE@H@Z			; Ex48::Generation::Generation
PUBLIC	?GetFreeSpace@Generation@Ex48@@QAEIXZ		; Ex48::Generation::GetFreeSpace
PUBLIC	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__RTC_UninitUse:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Allocate@HeapManager@Ex48@@SAPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Allocate@HeapManager@Ex48@@SAPAXI@Z$0
__ehfuncinfo$?Allocate@HeapManager@Ex48@@SAPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Allocate@HeapManager@Ex48@@SAPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Allocate@HeapManager@Ex48@@SAPAXI@Z
_TEXT	SEGMENT
tv89 = -256						; size = 4
$T41803 = -248						; size = 4
$T41804 = -236						; size = 4
$T41810 = -221						; size = 1
_g$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_size$ = 8						; size = 4
?Allocate@HeapManager@Ex48@@SAPAXI@Z PROC		; Ex48::HeapManager::Allocate, COMDAT

; 71   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Allocate@HeapManager@Ex48@@SAPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	BYTE PTR $T41810[ebp], 0

; 72   : 			Generation* g;
; 73   : 
; 74   : 			if(gen.size() > 0)  

	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	test	eax, eax
	jbe	SHORT $LN3@Allocate

; 75   : 				g = gen[gen.size() -1];		 //pick the last gen	

	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	sub	eax, 1
	push	eax
	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	??A?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEAAPAVGeneration@Ex48@@I@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::operator[]
	mov	BYTE PTR $T41810[ebp], 1
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _g$[ebp], eax
$LN3@Allocate:

; 76   : 
; 77   : 			//if there is no gen or last gen is full
; 78   : 			if((gen.size() == 0) || (g->GetFreeSpace() < size)) 

	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	test	eax, eax
	je	SHORT $LN1@Allocate
	cmp	BYTE PTR $T41810[ebp], 0
	jne	SHORT $LN9@Allocate
	push	OFFSET $LN10@Allocate
	call	__RTC_UninitUse
	add	esp, 4
$LN9@Allocate:
	mov	ecx, DWORD PTR _g$[ebp]
	call	?GetFreeSpace@Generation@Ex48@@QAEIXZ	; Ex48::Generation::GetFreeSpace
	cmp	eax, DWORD PTR _size$[ebp]
	jae	$LN2@Allocate
$LN1@Allocate:

; 79   : 			{
; 80   : 				g= new Generation(gen.size()); //create a new gen

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T41804[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T41804[ebp], 0
	je	SHORT $LN6@Allocate
	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	push	eax
	mov	ecx, DWORD PTR $T41804[ebp]
	call	??0Generation@Ex48@@QAE@H@Z		; Ex48::Generation::Generation
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN7@Allocate
$LN6@Allocate:
	mov	DWORD PTR tv89[ebp], 0
$LN7@Allocate:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T41803[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	BYTE PTR $T41810[ebp], 1
	mov	ecx, DWORD PTR $T41803[ebp]
	mov	DWORD PTR _g$[ebp], ecx

; 81   : 				gen.push_back(g);			   //add to gen collection	

	mov	BYTE PTR $T41810[ebp], 1
	lea	eax, DWORD PTR _g$[ebp]
	push	eax
	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	?push_back@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXABQAVGeneration@Ex48@@@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::push_back
$LN2@Allocate:

; 82   : 			}
; 83   : 			
; 84   : 			return g->Allocate(size);

	cmp	BYTE PTR $T41810[ebp], 0
	jne	SHORT $LN11@Allocate
	push	OFFSET $LN10@Allocate
	call	__RTC_UninitUse
	add	esp, 4
$LN11@Allocate:
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _g$[ebp]
	call	?Allocate@Generation@Ex48@@QAEPAXI@Z	; Ex48::Generation::Allocate

; 85   : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Allocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@Allocate:
	DD	1
	DD	$LN13@Allocate
$LN13@Allocate:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@Allocate
$LN10@Allocate:
	DB	103					; 00000067H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Allocate@HeapManager@Ex48@@SAPAXI@Z$0:
	mov	eax, DWORD PTR $T41804[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Allocate@HeapManager@Ex48@@SAPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Allocate@HeapManager@Ex48@@SAPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Allocate@HeapManager@Ex48@@SAPAXI@Z ENDP		; Ex48::HeapManager::Allocate
PUBLIC	??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
PUBLIC	??_C@_0BE@BKKMLFPN@Created?5generation?5?$AA@	; `string'
PUBLIC	??0?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
;	COMDAT ??_C@_0BE@BKKMLFPN@Created?5generation?5?$AA@
CONST	SEGMENT
??_C@_0BE@BKKMLFPN@Created?5generation?5?$AA@ DB 'Created generation ', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Generation@Ex48@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Generation@Ex48@@QAE@H@Z$0
__ehfuncinfo$??0Generation@Ex48@@QAE@H@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Generation@Ex48@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0Generation@Ex48@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_no$ = 8						; size = 4
??0Generation@Ex48@@QAE@H@Z PROC			; Ex48::Generation::Generation, COMDAT
; _this$ = ecx

; 35   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Generation@Ex48@@QAE@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _no$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 36   : 			cout<<"Created generation "<<id<<endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	OFFSET ??_C@_0BE@BKKMLFPN@Created?5generation?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 37   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Generation@Ex48@@QAE@H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
__ehhandler$??0Generation@Ex48@@QAE@H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Generation@Ex48@@QAE@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Generation@Ex48@@QAE@H@Z ENDP			; Ex48::Generation::Generation
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetFreeSpace@Generation@Ex48@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetFreeSpace@Generation@Ex48@@QAEIXZ PROC		; Ex48::Generation::GetFreeSpace, COMDAT
; _this$ = ecx

; 39   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 			return MAXSIZE - (cur- top);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+12]
	mov	eax, 10					; 0000000aH
	sub	eax, edx

; 41   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFreeSpace@Generation@Ex48@@QAEIXZ ENDP		; Ex48::Generation::GetFreeSpace
_TEXT	ENDS
PUBLIC	??_C@_0L@NOGDKPFF@allocated?5?$AA@		; `string'
PUBLIC	??_C@_04LNPKFDKO@?5at?5?$AA@			; `string'
PUBLIC	??_C@_08LOMOIHIP@?5on?5gen?5?$AA@		; `string'
PUBLIC	?push_back@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEX$$QAUMetaData@Ex48@@@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::push_back
PUBLIC	??0MetaData@Ex48@@QAE@PAXI@Z			; Ex48::MetaData::MetaData
PUBLIC	__TI2?AVbad_alloc@std@@
PUBLIC	??0bad_alloc@std@@QAE@XZ			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	__CTA2?AVbad_alloc@std@@
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??0exception@std@@QAE@ABV01@@Z:PROC		; std::exception::exception
;	COMDAT ??_R0?AVexception@std@@@8
_DATA	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
_DATA	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __CTA2?AVbad_alloc@std@@
xdata$x	SEGMENT
__CTA2?AVbad_alloc@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_C@_0L@NOGDKPFF@allocated?5?$AA@
CONST	SEGMENT
??_C@_0L@NOGDKPFF@allocated?5?$AA@ DB 'allocated ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNPKFDKO@?5at?5?$AA@
CONST	SEGMENT
??_C@_04LNPKFDKO@?5at?5?$AA@ DB ' at ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOMOIHIP@?5on?5gen?5?$AA@
CONST	SEGMENT
??_C@_08LOMOIHIP@?5on?5gen?5?$AA@ DB ' on gen ', 00H	; `string'
CONST	ENDS
;	COMDAT __TI2?AVbad_alloc@std@@
xdata$x	SEGMENT
__TI2?AVbad_alloc@std@@ DD 00H
	DD	FLAT:??1bad_alloc@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_alloc@std@@
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Allocate@Generation@Ex48@@QAEPAXI@Z
_TEXT	SEGMENT
tv167 = -256						; size = 4
$T41834 = -248						; size = 12
$T41836 = -228						; size = 8
_temp$ = -20						; size = 4
_this$ = -8						; size = 4
_size$ = 8						; size = 4
?Allocate@Generation@Ex48@@QAEPAXI@Z PROC		; Ex48::Generation::Allocate, COMDAT
; _this$ = ecx

; 43   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 			if(size > GetFreeSpace())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFreeSpace@Generation@Ex48@@QAEIXZ	; Ex48::Generation::GetFreeSpace
	cmp	DWORD PTR _size$[ebp], eax
	jbe	SHORT $LN1@Allocate@2

; 45   : 				throw bad_alloc();

	lea	ecx, DWORD PTR $T41834[ebp]
	call	??0bad_alloc@std@@QAE@XZ		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T41834[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@Allocate@2:

; 46   : 		
; 47   : 			char* temp = cur;	//save cur 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _temp$[ebp], ecx

; 48   : 			cur += size;		//set cur to next free memory

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], ecx

; 49   : 
; 50   : 			//save objects address & size
; 51   : 			objects.push_back(MetaData(temp,size)); 

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _temp$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T41836[ebp]
	call	??0MetaData@Ex48@@QAE@PAXI@Z		; Ex48::MetaData::MetaData
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?push_back@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEX$$QAUMetaData@Ex48@@@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::push_back

; 52   : 
; 53   : 			cout<<"allocated "<<size<<" at "<< (void*)temp<<" on gen "<<id<<endl;

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	OFFSET ??_C@_08LOMOIHIP@?5on?5gen?5?$AA@
	mov	ebx, esp
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	push	OFFSET ??_C@_04LNPKFDKO@?5at?5?$AA@
	mov	eax, esp
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	OFFSET ??_C@_0L@NOGDKPFF@allocated?5?$AA@
	mov	edx, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	edx
	mov	DWORD PTR tv167[ebp], eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	mov	ecx, DWORD PTR tv167[ebp]
	cmp	ecx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@PBX@Z
	cmp	ebx, esp
	call	__RTC_CheckEsp
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 54   : 			return temp;

	mov	eax, DWORD PTR _temp$[ebp]
$LN3@Allocate@2:

; 55   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Allocate@Generation@Ex48@@QAEPAXI@Z ENDP		; Ex48::Generation::Allocate
_TEXT	ENDS
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
EXTRN	__imp_??0exception@std@@QAE@ABQBDH@Z:PROC
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	?what@exception@std@@UBEPBDXZ:PROC		; std::exception::what
;	COMDAT ??_R2exception@std@@8
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0bad_alloc@std@@QAE@XZ
_TEXT	SEGMENT
$T41839 = -212						; size = 4
_this$ = -8						; size = 4
??0bad_alloc@std@@QAE@XZ PROC				; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 350  : 		{	// construct from message string with no memory allocation

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T41839[ebp], OFFSET ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
	mov	esi, esp
	push	1
	lea	eax, DWORD PTR $T41839[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBDH@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 351  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_alloc@std@@QAE@XZ ENDP				; std::bad_alloc::bad_alloc
_TEXT	ENDS
EXTRN	__imp_??1exception@std@@UAE@XZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 354  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 355  : 		}

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1exception@std@@UAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ		; std::bad_alloc::~bad_alloc
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\ali\samples\c++\examples 2\memorymanagement\memorymanagement\e48.cpp
_TEXT	ENDS
;	COMDAT ??0MetaData@Ex48@@QAE@PAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
_s$ = 12						; size = 4
??0MetaData@Ex48@@QAE@PAXI@Z PROC			; Ex48::MetaData::MetaData, COMDAT
; _this$ = ecx

; 20   : 		MetaData(void* a,size_t s):Address(a),size(s) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0MetaData@Ex48@@QAE@PAXI@Z ENDP			; Ex48::MetaData::MetaData
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABV01@@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABV01@@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
PUBLIC	??1Generation@Ex48@@QAE@XZ			; Ex48::Generation::~Generation
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GGeneration@Ex48@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GGeneration@Ex48@@QAEPAXI@Z PROC			; Ex48::Generation::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Generation@Ex48@@QAE@XZ		; Ex48::Generation::~Generation
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGeneration@Ex48@@QAEPAXI@Z ENDP			; Ex48::Generation::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_C@_0BG@KNCPEOBG@destroyed?5generation?5?$AA@	; `string'
;	COMDAT ??_C@_0BG@KNCPEOBG@destroyed?5generation?5?$AA@
CONST	SEGMENT
??_C@_0BG@KNCPEOBG@destroyed?5generation?5?$AA@ DB 'destroyed generation '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1Generation@Ex48@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1Generation@Ex48@@QAE@XZ$0
__ehfuncinfo$??1Generation@Ex48@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1Generation@Ex48@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1Generation@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1Generation@Ex48@@QAE@XZ PROC				; Ex48::Generation::~Generation, COMDAT
; _this$ = ecx

; 57   : 		{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1Generation@Ex48@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 58   : 			cout<<"destroyed generation "<<id<<endl;	

	mov	esi, esp
	mov	eax, DWORD PTR __imp_?endl@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@1@AAV21@@Z
	push	eax
	mov	edi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	OFFSET ??_C@_0BG@KNCPEOBG@destroyed?5generation?5?$AA@
	mov	eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1Generation@Ex48@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
__ehhandler$??1Generation@Ex48@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1Generation@Ex48@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1Generation@Ex48@@QAE@XZ ENDP				; Ex48::Generation::~Generation
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2@YAPAXIUManaged@Ex48@@@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
___formal$ = 12						; size = 1
??2@YAPAXIUManaged@Ex48@@@Z PROC			; operator new, COMDAT

; 148  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 149  : 	return  HeapManager::Allocate(size);  

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	?Allocate@HeapManager@Ex48@@SAPAXI@Z	; Ex48::HeapManager::Allocate
	add	esp, 4

; 150  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIUManaged@Ex48@@@Z ENDP			; operator new
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >
PUBLIC	??0?$allocator@UMetaData@Ex48@@@std@@QAE@XZ	; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T41864 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T41864[ebp], esp
	call	??0?$allocator@UMetaData@Ex48@@@std@@QAE@XZ ; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z ; std::_Cons_val<std::allocator<Ex48::MetaData>,Ex48::MetaData,Ex48::MetaData>
PUBLIC	??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z ; std::forward<Ex48::MetaData>
PUBLIC	?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXI@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Reserve
PUBLIC	?_Inside@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBE_NPBUMetaData@Ex48@@@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Inside
PUBLIC	??$addressof@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@AAU12@@Z ; std::addressof<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEX$$QAUMetaData@Ex48@@@Z
_TEXT	SEGMENT
__Idx$34771 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEX$$QAUMetaData@Ex48@@@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@AAU12@@Z ; std::addressof<Ex48::MetaData>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBE_NPBUMetaData@Ex48@@@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@AAU12@@Z ; std::addressof<Ex48::MetaData>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 3
	mov	DWORD PTR __Idx$34771[ebp], eax

; 635  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back

; 636  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXI@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Reserve
$LN3@push_back:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Orphan_range

; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$34771[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	call	??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z ; std::forward<Ex48::MetaData>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z ; std::_Cons_val<std::allocator<Ex48::MetaData>,Ex48::MetaData,Ex48::MetaData>
	add	esp, 12					; 0000000cH

; 641  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 642  : 			}
; 643  : 		else

	jmp	SHORT $LN5@push_back
$LN4@push_back:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back

; 646  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXI@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Reserve
$LN1@push_back:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Orphan_range

; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z ; std::forward<Ex48::MetaData>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z ; std::_Cons_val<std::allocator<Ex48::MetaData>,Ex48::MetaData,Ex48::MetaData>
	add	esp, 12					; 0000000cH

; 651  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back:

; 652  : 			}
; 653  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEX$$QAUMetaData@Ex48@@@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::push_back
_TEXT	ENDS
PUBLIC	??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >
PUBLIC	?_Tidy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >
__ehhandler$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 3

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size
_TEXT	ENDS
PUBLIC	??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LK@PCOEEGDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAM?$AAe?$AAt?$AAa?$AAD?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; `string'
PUBLIC	??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; `string'
PUBLIC	??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
;	COMDAT ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ DB '"'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@PCOEEGDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAM?$AAe?$AAt?$AAa?$AAD?$AAa?$AAt@
CONST	SEGMENT
??_C@_1LK@PCOEEGDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAM?$AAe?$AAt?$AAa?$AAD?$AAa?$AAt@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, ' ', 00H, 'E', 00H
	DB	'x', 00H, '4', 00H, '8', 00H, ':', 00H, ':', 00H, 'M', 00H, 'e'
	DB	00H, 't', 00H, 'a', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, 'E', 00H, 'x', 00H, '4', 00H, '8'
	DB	00H, ':', 00H, ':', 00H, 'M', 00H, 'e', 00H, 't', 00H, 'a', 00H
	DB	'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
CONST	SEGMENT
??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ DB '"'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, ' ', 00H, 'C', 00H, '+', 00H, '+', 00H, ' '
	DB	00H, 'L', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'O', 00H, 'u', 00H, 't'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'R', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
CONST	SEGMENT
??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ DB 'Stand'
	DB	'ard C++ Libraries Out of Range', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r', 00H, 'i'
	DB	00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	$LN1@operator

; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	932					; 000003a4H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 933  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator
	xor	ecx, ecx
	jne	SHORT $LN5@operator
$LN4@operator:
	mov	esi, esp
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator
	int	3
$LN5@operator:
	mov	esi, esp
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1LK@PCOEEGDN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAM?$AAe?$AAt?$AAa?$AAD?$AAa?$AAt@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:

; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]

; 941  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEAAUMetaData@Ex48@@I@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
_TEXT	ENDS
PUBLIC	??_C@_1MG@LGIFGEMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAi@ ; `string'
;	COMDAT ??_C@_1MG@LGIFGEMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAi@
CONST	SEGMENT
??_C@_1MG@LGIFGEMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'E', 00H, 'x', 00H
	DB	'4', 00H, '8', 00H, ':', 00H, ':', 00H, 'G', 00H, 'e', 00H, 'n'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, '*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'E', 00H, 'x'
	DB	00H, '4', 00H, '8', 00H, ':', 00H, ':', 00H, 'G', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEAAPAVGeneration@Ex48@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEAAPAVGeneration@Ex48@@I@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	$LN1@operator@2

; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	932					; 000003a4H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 933  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator@2
	xor	ecx, ecx
	jne	SHORT $LN5@operator@2
$LN4@operator@2:
	mov	esi, esp
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@2
	int	3
$LN5@operator@2:
	mov	esi, esp
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1MG@LGIFGEMD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAE?$AAx?$AA4?$AA8?$AA?3?$AA?3?$AAG?$AAe?$AAn?$AAe?$AAr?$AAa?$AAt?$AAi@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:

; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 941  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEAAPAVGeneration@Ex48@@I@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::operator[]
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@ABQAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@ABQAV23@@Z ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * const &>
PUBLIC	??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@AAPAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@AAPAV23@@Z ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * &>
PUBLIC	?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXI@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Reserve
PUBLIC	?_Inside@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBE_NPBQAVGeneration@Ex48@@@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Inside
PUBLIC	??$addressof@QAVGeneration@Ex48@@@std@@YAPBQAVGeneration@Ex48@@ABQAV12@@Z ; std::addressof<Ex48::Generation * const>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXABQAVGeneration@Ex48@@@Z
_TEXT	SEGMENT
__Idx$34841 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXABQAVGeneration@Ex48@@@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::push_back, COMDAT
; _this$ = ecx

; 976  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVGeneration@Ex48@@@std@@YAPBQAVGeneration@Ex48@@ABQAV12@@Z ; std::addressof<Ex48::Generation * const>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBE_NPBQAVGeneration@Ex48@@@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@push_back@2

; 978  : 			{	// push back an element
; 979  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@QAVGeneration@Ex48@@@std@@YAPBQAVGeneration@Ex48@@ABQAV12@@Z ; std::addressof<Ex48::Generation * const>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$34841[ebp], eax

; 980  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back@2

; 981  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXI@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Reserve
$LN3@push_back@2:

; 982  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Orphan_range

; 983  : 			_Cons_val(this->_Alval,
; 984  : 				this->_Mylast,
; 985  : 				this->_Myfirst[_Idx]);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$34841[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@AAPAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@AAPAV23@@Z ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * &>
	add	esp, 12					; 0000000cH

; 986  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 987  : 			}
; 988  : 		else

	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:

; 989  : 			{	// push back a non-element
; 990  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back@2

; 991  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXI@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Reserve
$LN1@push_back@2:

; 992  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Orphan_range

; 993  : 			_Cons_val(this->_Alval,
; 994  : 				this->_Mylast,
; 995  : 				_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@ABQAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@ABQAV23@@Z ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * const &>
	add	esp, 12					; 0000000cH

; 996  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back@2:

; 997  : 			}
; 998  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXABQAVGeneration@Ex48@@@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::push_back
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ PROC ; std::vector<void * *,std::allocator<void * *> >::size, COMDAT
; _this$ = ecx

; 878  : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ENDP ; std::vector<void * *,std::allocator<void * *> >::size
_TEXT	ENDS
PUBLIC	??_C@_1IG@FLLNKMCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3@ ; `string'
;	COMDAT ??_C@_1IG@FLLNKMCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3@
CONST	SEGMENT
??_C@_1IG@FLLNKMCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'v', 00H, 'o'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, '*', 00H, ' ', 00H, '*', 00H
	DB	',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '<', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, '*', 00H, ' ', 00H, '*', 00H, '>', 00H, ' ', 00H, '>'
	DB	00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??A?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEAAPAPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEAAPAPAXI@Z PROC ; std::vector<void * *,std::allocator<void * *> >::operator[], COMDAT
; _this$ = ecx

; 928  : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 929  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 930  : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	$LN1@operator@3

; 931  : 			{	// report error
; 932  : 			_DEBUG_ERROR("vector subscript out of range");

	mov	esi, esp
	push	932					; 000003a4H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 933  : 			_SCL_SECURE_OUT_OF_RANGE;

	mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
	test	eax, eax
	je	SHORT $LN4@operator@3
	xor	ecx, ecx
	jne	SHORT $LN5@operator@3
$LN4@operator@3:
	mov	esi, esp
	push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	2
	call	DWORD PTR __imp___CrtDbgReportW
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN5@operator@3
	int	3
$LN5@operator@3:
	mov	esi, esp
	push	0
	push	933					; 000003a5H
	push	OFFSET ??_C@_1IM@HKEDEABP@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	push	OFFSET ??_C@_1IG@FLLNKMCN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?5?$AA?$CK?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3@
	push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:

; 934  : 			}
; 935  : 
; 936  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 937  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 938  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 939  : 
; 940  : 		return (*(this->_Myfirst + _Pos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 941  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEAAPAPAXI@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::operator[]
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::push_back
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\ali\samples\c++\examples 2\memorymanagement\memorymanagement\e48.cpp
;	COMDAT ??0?$Ptr@H@Ex48@@QAE@PAH@Z
_TEXT	SEGMENT
$T41899 = -212						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
??0?$Ptr@H@Ex48@@QAE@PAH@Z PROC				; Ex48::Ptr<int>::Ptr<int>, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx

; 101  : 			stack.push_back((void**) &m_p); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T41899[ebp], eax
	lea	ecx, DWORD PTR $T41899[ebp]
	push	ecx
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::push_back

; 102  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$Ptr@H@Ex48@@QAE@PAH@Z ENDP				; Ex48::Ptr<int>::Ptr<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$Ptr@H@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$Ptr@H@Ex48@@QAE@XZ PROC				; Ex48::Ptr<int>::~Ptr<int>, COMDAT
; _this$ = ecx

; 108  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 			m_p =0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 110  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Ptr@H@Ex48@@QAE@XZ ENDP				; Ex48::Ptr<int>::~Ptr<int>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$Ptr@D@Ex48@@QAE@PAD@Z
_TEXT	SEGMENT
$T41904 = -212						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
??0?$Ptr@D@Ex48@@QAE@PAD@Z PROC				; Ex48::Ptr<char>::Ptr<char>, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx

; 101  : 			stack.push_back((void**) &m_p); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T41904[ebp], eax
	lea	ecx, DWORD PTR $T41904[ebp]
	push	ecx
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::push_back

; 102  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$Ptr@D@Ex48@@QAE@PAD@Z ENDP				; Ex48::Ptr<char>::Ptr<char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$Ptr@D@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$Ptr@D@Ex48@@QAE@XZ PROC				; Ex48::Ptr<char>::~Ptr<char>, COMDAT
; _this$ = ecx

; 108  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 			m_p =0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 110  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Ptr@D@Ex48@@QAE@XZ ENDP				; Ex48::Ptr<char>::~Ptr<char>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$Ptr@USA@Ex48@@@Ex48@@QAE@PAUSA@1@@Z
_TEXT	SEGMENT
$T41909 = -212						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
??0?$Ptr@USA@Ex48@@@Ex48@@QAE@PAUSA@1@@Z PROC		; Ex48::Ptr<Ex48::SA>::Ptr<Ex48::SA>, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx

; 101  : 			stack.push_back((void**) &m_p); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T41909[ebp], eax
	lea	ecx, DWORD PTR $T41909[ebp]
	push	ecx
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::push_back

; 102  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$Ptr@USA@Ex48@@@Ex48@@QAE@PAUSA@1@@Z ENDP		; Ex48::Ptr<Ex48::SA>::Ptr<Ex48::SA>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$Ptr@USA@Ex48@@@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$Ptr@USA@Ex48@@@Ex48@@QAE@XZ PROC			; Ex48::Ptr<Ex48::SA>::~Ptr<Ex48::SA>, COMDAT
; _this$ = ecx

; 108  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 			m_p =0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 110  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Ptr@USA@Ex48@@@Ex48@@QAE@XZ ENDP			; Ex48::Ptr<Ex48::SA>::~Ptr<Ex48::SA>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$Ptr@N@Ex48@@QAE@PAN@Z
_TEXT	SEGMENT
$T41914 = -212						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
??0?$Ptr@N@Ex48@@QAE@PAN@Z PROC				; Ex48::Ptr<double>::Ptr<double>, COMDAT
; _this$ = ecx

; 100  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx

; 101  : 			stack.push_back((void**) &m_p); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T41914[ebp], eax
	lea	ecx, DWORD PTR $T41914[ebp]
	push	ecx
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::push_back

; 102  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$Ptr@N@Ex48@@QAE@PAN@Z ENDP				; Ex48::Ptr<double>::Ptr<double>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1?$Ptr@N@Ex48@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$Ptr@N@Ex48@@QAE@XZ PROC				; Ex48::Ptr<double>::~Ptr<double>, COMDAT
; _this$ = ecx

; 108  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 			m_p =0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 110  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$Ptr@N@Ex48@@QAE@XZ ENDP				; Ex48::Ptr<double>::~Ptr<double>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBE_NPBUMetaData@Ex48@@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBE_NPBUMetaData@Ex48@@@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside
$LN3@Inside:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBE_NPBUMetaData@Ex48@@@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::reserve
PUBLIC	?_Grow_to@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEII@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Grow_to
PUBLIC	?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::capacity
PUBLIC	?_Xlen@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Xlen
PUBLIC	?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXI@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Xlen
	jmp	SHORT $LN6@Reserve
$LN4@Reserve:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve
$LN2@Reserve:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEII@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::reserve
$LN6@Reserve:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Reserve
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z ; std::allocator<Ex48::MetaData>::deallocate
PUBLIC	?_Destroy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXPAUMetaData@Ex48@@0@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Destroy
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXXZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXPAUMetaData@Ex48@@0@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z ; std::allocator<Ex48::MetaData>::deallocate
$LN1@Tidy:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran
$LN2@Orphan_ran:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran
$LN3@Orphan_ran:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran
$LN6@Orphan_ran:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@Orphan_ran:
	DD	1
	DD	$LN12@Orphan_ran
$LN12@Orphan_ran:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran
$LN10@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXPAUMetaData@Ex48@@0@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 169  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 171  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 179  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 181  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
PUBLIC	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0UMetaData@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UMetaData@Ex48@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::MetaData>
PUBLIC	??0?$allocator@UMetaData@Ex48@@@std@@QAE@ABV01@@Z ; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z
_TEXT	SEGMENT
$T41943 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z PROC ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@UMetaData@Ex48@@@std@@QAE@ABV01@@Z ; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0UMetaData@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UMetaData@Ex48@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::MetaData>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T41943[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Vector_val:
	DD	1
	DD	$LN6@Vector_val
$LN6@Vector_val:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val
$LN4@Vector_val:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@V?$allocator@UMetaData@Ex48@@@1@@Z ENDP ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 65   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 66   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0UMetaData@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UMetaData@Ex48@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::MetaData>

; 455  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@2:
	DD	1
	DD	$LN6@Vector_val@2
$LN6@Vector_val@2:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@2
$LN4@Vector_val@2:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >::~_Vector_val<Ex48::MetaData,std::allocator<Ex48::MetaData> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@UMetaData@Ex48@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@UMetaData@Ex48@@@std@@QAE@XZ PROC	; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UMetaData@Ex48@@@std@@QAE@XZ ENDP	; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBE_NPBQAVGeneration@Ex48@@@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBE_NPBQAVGeneration@Ex48@@@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@2
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside@2
$LN3@Inside@2:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside@2:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBE_NPBQAVGeneration@Ex48@@@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::reserve
PUBLIC	?_Grow_to@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEII@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Grow_to
PUBLIC	?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::capacity
PUBLIC	?_Xlen@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Xlen
PUBLIC	?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXI@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve@2

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Xlen
	jmp	SHORT $LN6@Reserve@2
$LN4@Reserve@2:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve@2

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve@2
$LN2@Reserve@2:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEII@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::reserve
$LN6@Reserve@2:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXI@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Reserve
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran@2
$LN5@Orphan_ran@2:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran@2

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran@2
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran@2
$LN2@Orphan_ran@2:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran@2
$LN3@Orphan_ran@2:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran@2:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran@2
$LN6@Orphan_ran@2:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@Orphan_ran@2:
	DD	1
	DD	$LN12@Orphan_ran@2
$LN12@Orphan_ran@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran@2
$LN10@Orphan_ran@2:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXPAPAVGeneration@Ex48@@0@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Orphan_range
PUBLIC	??$_Cons_val@V?$allocator@PAPAX@std@@PAPAXPAPAX@std@@YAXAAV?$allocator@PAPAX@0@PAPAPAX$$QAPAPAX@Z ; std::_Cons_val<std::allocator<void * *>,void * *,void * *>
PUBLIC	??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z	; std::forward<void * *>
PUBLIC	?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z ; std::vector<void * *,std::allocator<void * *> >::_Orphan_range
PUBLIC	?_Reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXI@Z ; std::vector<void * *,std::allocator<void * *> >::_Reserve
PUBLIC	?_Inside@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBE_NPBQAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::_Inside
PUBLIC	??$addressof@PAPAX@std@@YAPAPAPAXAAPAPAX@Z	; std::addressof<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z
_TEXT	SEGMENT
__Idx$36340 = -20					; size = 4
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z PROC ; std::vector<void * *,std::allocator<void * *> >::push_back, COMDAT
; _this$ = ecx

; 631  : 		{	// insert element at end

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 632  : 		if (_Inside(_STD addressof(_Val)))

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@PAPAX@std@@YAPAPAPAXAAPAPAX@Z ; std::addressof<void * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBE_NPBQAPAX@Z ; std::vector<void * *,std::allocator<void * *> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	$LN4@push_back@3

; 633  : 			{	// push back an element
; 634  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@PAPAX@std@@YAPAPAPAXAAPAPAX@Z ; std::addressof<void * *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2
	mov	DWORD PTR __Idx$36340[ebp], eax

; 635  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN3@push_back@3

; 636  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXI@Z ; std::vector<void * *,std::allocator<void * *> >::_Reserve
$LN3@push_back@3:

; 637  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z ; std::vector<void * *,std::allocator<void * *> >::_Orphan_range

; 638  : 			_Cons_val(this->_Alval,
; 639  : 				this->_Mylast,
; 640  : 				_STD forward<_Ty>(this->_Myfirst[_Idx]));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Idx$36340[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@PAPAX@std@@PAPAXPAPAX@std@@YAXAAV?$allocator@PAPAX@0@PAPAPAX$$QAPAPAX@Z ; std::_Cons_val<std::allocator<void * *>,void * *,void * *>
	add	esp, 12					; 0000000cH

; 641  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 642  : 			}
; 643  : 		else

	jmp	SHORT $LN5@push_back@3
$LN4@push_back@3:

; 644  : 			{	// push back a non-element
; 645  : 			if (this->_Mylast == this->_Myend)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN1@push_back@3

; 646  : 				_Reserve(1);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXI@Z ; std::vector<void * *,std::allocator<void * *> >::_Reserve
$LN1@push_back@3:

; 647  : 			_Orphan_range(this->_Mylast, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z ; std::vector<void * *,std::allocator<void * *> >::_Orphan_range

; 648  : 			_Cons_val(this->_Alval,
; 649  : 				this->_Mylast,
; 650  : 				_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$_Cons_val@V?$allocator@PAPAX@std@@PAPAXPAPAX@std@@YAXAAV?$allocator@PAPAX@0@PAPAPAX$$QAPAPAX@Z ; std::_Cons_val<std::allocator<void * *>,void * *,void * *>
	add	esp, 12					; 0000000cH

; 651  : 			++this->_Mylast;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN5@push_back@3:

; 652  : 			}
; 653  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEX$$QAPAPAX@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::push_back
_TEXT	ENDS
PUBLIC	??$_Umove@PAUMetaData@Ex48@@@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEPAUMetaData@Ex48@@PAU23@00@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Umove<Ex48::MetaData *>
PUBLIC	?allocate@?$allocator@UMetaData@Ex48@@@std@@QAEPAUMetaData@Ex48@@I@Z ; std::allocator<Ex48::MetaData>::allocate
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$36860 = -48					; size = 4
__Ptr$36853 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Xlen
	jmp	$LN7@reserve
$LN5@reserve:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@UMetaData@Ex48@@@std@@QAEPAUMetaData@Ex48@@I@Z ; std::allocator<Ex48::MetaData>::allocate
	mov	DWORD PTR __Ptr$36853[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$36853[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAUMetaData@Ex48@@@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEPAUMetaData@Ex48@@PAU23@00@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Umove<Ex48::MetaData *>
	jmp	SHORT $LN8@reserve
__catch$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$36853[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z ; std::allocator<Ex48::MetaData>::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::size
	mov	DWORD PTR __Size$36860[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXPAUMetaData@Ex48@@0@Z ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 3
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z ; std::allocator<Ex48::MetaData>::deallocate
$LN1@reserve:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$36853[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$36860[ebp]
	mov	ecx, DWORD PTR __Ptr$36853[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$36853[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 3

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UMetaData@Ex48@@@std@@QBEIXZ ; std::allocator<Ex48::MetaData>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@UMetaData@Ex48@@@std@@QBEIXZ ; std::allocator<Ex48::MetaData>::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@@Z ; std::_Destroy_range<std::allocator<Ex48::MetaData> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXPAUMetaData@Ex48@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXPAUMetaData@Ex48@@0@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@@Z ; std::_Destroy_range<std::allocator<Ex48::MetaData> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEXPAUMetaData@Ex48@@0@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEII@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEII@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Grow_to
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXXZ PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IBEXXZ ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Xlen
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??0?$allocator@UMetaData@Ex48@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@UMetaData@Ex48@@@std@@QAE@ABV01@@Z PROC	; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@UMetaData@Ex48@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<Ex48::MetaData>::allocator<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z PROC ; std::allocator<Ex48::MetaData>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@I@Z ENDP ; std::allocator<Ex48::MetaData>::deallocate
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXPAPAVGeneration@Ex48@@0@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Destroy
PUBLIC	?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z ; std::allocator<Ex48::Generation *>::deallocate
PUBLIC	??$_Umove@PAPAVGeneration@Ex48@@@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEPAPAVGeneration@Ex48@@PAPAV23@00@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Umove<Ex48::Generation * *>
PUBLIC	?allocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEPAPAVGeneration@Ex48@@I@Z ; std::allocator<Ex48::Generation *>::allocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$36897 = -48					; size = 4
__Ptr$36890 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve@2

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Xlen
	jmp	$LN7@reserve@2
$LN5@reserve@2:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve@2

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEPAPAVGeneration@Ex48@@I@Z ; std::allocator<Ex48::Generation *>::allocate
	mov	DWORD PTR __Ptr$36890[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$36890[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAVGeneration@Ex48@@@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEPAPAVGeneration@Ex48@@PAPAV23@00@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Umove<Ex48::Generation * *>
	jmp	SHORT $LN8@reserve@2
__catch$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$36890[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z ; std::allocator<Ex48::Generation *>::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::size
	mov	DWORD PTR __Size$36897[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve@2

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXPAPAVGeneration@Ex48@@0@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z ; std::allocator<Ex48::Generation *>::deallocate
$LN1@reserve@2:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$36890[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$36897[ebp]
	mov	ecx, DWORD PTR __Ptr$36890[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$36890[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve@2:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAEXI@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::reserve
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVGeneration@Ex48@@@std@@QBEIXZ ; std::allocator<Ex48::Generation *>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@PAVGeneration@Ex48@@@std@@QBEIXZ ; std::allocator<Ex48::Generation *>::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::max_size
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@@Z ; std::_Destroy_range<std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXPAPAVGeneration@Ex48@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXPAPAVGeneration@Ex48@@0@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@@Z ; std::_Destroy_range<std::allocator<Ex48::Generation *> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXPAPAVGeneration@Ex48@@0@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEII@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QBEIXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to@2
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to@2
$LN4@Grow_to@2:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to@2:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to@2

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@2:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEII@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Grow_to
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXXZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen@2:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IBEXXZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Xlen
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z PROC ; std::allocator<Ex48::Generation *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z ENDP ; std::allocator<Ex48::Generation *>::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?_Inside@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBE_NPBQAPAX@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBE_NPBQAPAX@Z PROC ; std::vector<void * *,std::allocator<void * *> >::_Inside, COMDAT
; _this$ = ecx

; 1285 : 		{	// test if _Ptr points inside vector

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN3@Inside@3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside@3
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN4@Inside@3
$LN3@Inside@3:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Inside@3:
	mov	al, BYTE PTR tv76[ebp]

; 1287 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBE_NPBQAPAX@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::_Inside
_TEXT	ENDS
PUBLIC	?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z ; std::vector<void * *,std::allocator<void * *> >::reserve
PUBLIC	?_Grow_to@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEII@Z ; std::vector<void * *,std::allocator<void * *> >::_Grow_to
PUBLIC	?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::capacity
PUBLIC	?_Xlen@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXXZ ; std::vector<void * *,std::allocator<void * *> >::_Xlen
PUBLIC	?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Size$ = -20						; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXI@Z PROC ; std::vector<void * *,std::allocator<void * *> >::_Reserve, COMDAT
; _this$ = ecx

; 1290 : 		{	// ensure room for _Count new elements, grow exponentially

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1291 : 		size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::size
	mov	DWORD PTR __Size$[ebp], eax

; 1292 : 		if (max_size() - _Count < _Size)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::max_size
	sub	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Size$[ebp]
	jae	SHORT $LN4@Reserve@3

; 1293 : 			_Xlen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXXZ ; std::vector<void * *,std::allocator<void * *> >::_Xlen
	jmp	SHORT $LN6@Reserve@3
$LN4@Reserve@3:

; 1294 : 		else if ((_Size += _Count) <= capacity())

	mov	eax, DWORD PTR __Size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Size$[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::capacity
	cmp	DWORD PTR __Size$[ebp], eax
	ja	SHORT $LN2@Reserve@3

; 1295 : 			;
; 1296 : 		else

	jmp	SHORT $LN6@Reserve@3
$LN2@Reserve@3:

; 1297 : 			reserve(_Grow_to(_Size));

	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEII@Z ; std::vector<void * *,std::allocator<void * *> >::_Grow_to
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z ; std::vector<void * *,std::allocator<void * *> >::reserve
$LN6@Reserve@3:

; 1298 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXI@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::_Reserve
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z
_TEXT	SEGMENT
__Pnext$ = -44						; size = 4
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z PROC ; std::vector<void * *,std::allocator<void * *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1437 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1438 : 		_Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1439 : 		const_iterator **_Pnext = (const_iterator **)this->_Getpfirst();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Pnext$[ebp], eax

; 1440 : 		if (_Pnext != 0)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN6@Orphan_ran@3
$LN5@Orphan_ran@3:

; 1441 : 			while (*_Pnext != 0)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_ran@3

; 1442 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR __First$[ebp]
	jb	SHORT $LN2@Orphan_ran@3
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Last$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN3@Orphan_ran@3
$LN2@Orphan_ran@3:

; 1443 : 					_Pnext = (const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1444 : 				else

	jmp	SHORT $LN1@Orphan_ran@3
$LN3@Orphan_ran@3:

; 1445 : 					{	// orphan the iterator
; 1446 : 					(*_Pnext)->_Clrcont();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1447 : 					*_Pnext = *(const_iterator **)(*_Pnext)->_Getpnext();

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN1@Orphan_ran@3:

; 1448 : 					}

	jmp	SHORT $LN5@Orphan_ran@3
$LN6@Orphan_ran@3:

; 1449 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@Orphan_ran@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN13@Orphan_ran@3:
	DD	1
	DD	$LN12@Orphan_ran@3
$LN12@Orphan_ran@3:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Orphan_ran@3
$LN10@Orphan_ran@3:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXPAPAPAX0@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::_Orphan_range
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
PUBLIC	??$_Allocate@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@IPAU12@@Z ; std::_Allocate<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@UMetaData@Ex48@@@std@@QAEPAUMetaData@Ex48@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UMetaData@Ex48@@@std@@QAEPAUMetaData@Ex48@@I@Z PROC ; std::allocator<Ex48::MetaData>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@IPAU12@@Z ; std::_Allocate<Ex48::MetaData>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UMetaData@Ex48@@@std@@QAEPAUMetaData@Ex48@@I@Z ENDP ; std::allocator<Ex48::MetaData>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UMetaData@Ex48@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@UMetaData@Ex48@@@std@@QBEIXZ PROC	; std::allocator<Ex48::MetaData>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@UMetaData@Ex48@@@std@@QBEIXZ ENDP	; std::allocator<Ex48::MetaData>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@IPAPAV12@@Z ; std::_Allocate<Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?allocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEPAPAVGeneration@Ex48@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEPAPAVGeneration@Ex48@@I@Z PROC ; std::allocator<Ex48::Generation *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@IPAPAV12@@Z ; std::_Allocate<Ex48::Generation *>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEPAPAVGeneration@Ex48@@I@Z ENDP ; std::allocator<Ex48::Generation *>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVGeneration@Ex48@@@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@PAVGeneration@Ex48@@@std@@QBEIXZ PROC ; std::allocator<Ex48::Generation *>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@2
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@2
$LN3@max_size@2:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@2:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAVGeneration@Ex48@@@std@@QBEIXZ ENDP ; std::allocator<Ex48::Generation *>::max_size
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXPAPAPAX0@Z ; std::vector<void * *,std::allocator<void * *> >::_Destroy
PUBLIC	?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z ; std::allocator<void * *>::deallocate
PUBLIC	??$_Umove@PAPAPAX@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEPAPAPAXPAPAPAX00@Z ; std::vector<void * *,std::allocator<void * *> >::_Umove<void * * *>
PUBLIC	?allocate@?$allocator@PAPAX@std@@QAEPAPAPAXI@Z	; std::allocator<void * *>::allocate
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__catchsym$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z$0
__unwindtable$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z$2
__ehfuncinfo$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Size$37240 = -48					; size = 4
__Ptr$37233 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Count$ = 8						; size = 4
?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z PROC ; std::vector<void * *,std::allocator<void * *> >::reserve, COMDAT
; _this$ = ecx

; 746  : 		{	// determine new minimum length of allocated storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 747  : 		if (max_size() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::max_size
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN5@reserve@3

; 748  : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXXZ ; std::vector<void * *,std::allocator<void * *> >::_Xlen
	jmp	$LN7@reserve@3
$LN5@reserve@3:

; 749  : 		else if (capacity() < _Count)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	$LN7@reserve@3

; 750  : 			{	// not enough room, reallocate
; 751  : 			pointer _Ptr = this->_Alval.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?allocate@?$allocator@PAPAX@std@@QAEPAPAPAXI@Z ; std::allocator<void * *>::allocate
	mov	DWORD PTR __Ptr$37233[ebp], eax

; 752  : 
; 753  : 			_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 754  : 			_Umove(this->_Myfirst, this->_Mylast, _Ptr);

	mov	eax, DWORD PTR __Ptr$37233[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Umove@PAPAPAX@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEPAPAPAXPAPAPAX00@Z ; std::vector<void * *,std::allocator<void * *> >::_Umove<void * * *>
	jmp	SHORT $LN8@reserve@3
__catch$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z$0:

; 755  : 			_CATCH_ALL
; 756  : 			this->_Alval.deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$37233[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z ; std::allocator<void * *>::deallocate

; 757  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 758  : 			_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z$1
	ret	0
$LN8@reserve@3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z$1:

; 759  : 
; 760  : 			size_type _Size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::size
	mov	DWORD PTR __Size$37240[ebp], eax

; 761  : 			if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@reserve@3

; 762  : 				{	// destroy and deallocate old array
; 763  : 				_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXPAPAPAX0@Z ; std::vector<void * *,std::allocator<void * *> >::_Destroy

; 764  : 				this->_Alval.deallocate(this->_Myfirst,
; 765  : 					this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z ; std::allocator<void * *>::deallocate
$LN1@reserve@3:

; 766  : 				}
; 767  : 
; 768  : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 769  : 			this->_Myend = _Ptr + _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Ptr$37233[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx

; 770  : 			this->_Mylast = _Ptr + _Size;

	mov	eax, DWORD PTR __Size$37240[ebp]
	mov	ecx, DWORD PTR __Ptr$37233[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx

; 771  : 			this->_Myfirst = _Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$37233[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN7@reserve@3:

; 772  : 			}
; 773  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?reserve@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAEXI@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::reserve
PUBLIC	??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@@Z ; std::_Destroy_range<std::allocator<void * *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Destroy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXPAPAPAX0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXPAPAPAX0@Z PROC ; std::vector<void * *,std::allocator<void * *> >::_Destroy, COMDAT
; _this$ = ecx

; 1269 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1270 : 		_Destroy_range(_First, _Last, this->_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@@Z ; std::_Destroy_range<std::allocator<void * *> >
	add	esp, 12					; 0000000cH

; 1271 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXPAPAPAX0@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::_Destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z PROC	; std::allocator<void * *>::deallocate, COMDAT
; _this$ = ecx

; 181  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 183  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z ENDP	; std::allocator<void * *>::deallocate
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ PROC ; std::vector<void * *,std::allocator<void * *> >::capacity, COMDAT
; _this$ = ecx

; 776  : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 778  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ENDP ; std::vector<void * *,std::allocator<void * *> >::capacity
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAPAX@std@@QBEIXZ		; std::allocator<void * *>::max_size
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ PROC ; std::vector<void * *,std::allocator<void * *> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (this->_Alval.max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?max_size@?$allocator@PAPAX@std@@QBEIXZ	; std::allocator<void * *>::max_size

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ENDP ; std::vector<void * *,std::allocator<void * *> >::max_size
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Grow_to@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEII@Z PROC ; std::vector<void * *,std::allocator<void * *> >::_Grow_to, COMDAT
; _this$ = ecx

; 1274 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1275 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1276 : 
; 1277 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1278 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QBEIXZ ; std::vector<void * *,std::allocator<void * *> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to@3
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to@3
$LN4@Grow_to@3:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to@3:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1279 : 		if (_Capacity < _Count)

	mov	eax, DWORD PTR __Capacity$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to@3

; 1280 : 			_Capacity = _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax
$LN1@Grow_to@3:

; 1281 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1282 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEII@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::_Grow_to
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXXZ PROC ; std::vector<void * *,std::allocator<void * *> >::_Xlen, COMDAT
; _this$ = ecx

; 1426 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1427 : 		_Xlength_error("vector<T> too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen@3:

; 1428 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IBEXXZ ENDP ; std::vector<void * *,std::allocator<void * *> >::_Xlen
_TEXT	ENDS
PUBLIC	??$_Allocate@PAPAX@std@@YAPAPAPAXIPAPAPAX@Z	; std::_Allocate<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?allocate@?$allocator@PAPAX@std@@QAEPAPAPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAPAX@std@@QAEPAPAPAXI@Z PROC	; std::allocator<void * *>::allocate, COMDAT
; _this$ = ecx

; 186  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@PAPAX@std@@YAPAPAPAXIPAPAPAX@Z ; std::_Allocate<void * *>
	add	esp, 8

; 188  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAPAX@std@@QAEPAPAPAXI@Z ENDP	; std::allocator<void * *>::allocate
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAPAX@std@@QBEIXZ
_TEXT	SEGMENT
tv65 = -220						; size = 4
__Count$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$allocator@PAPAX@std@@QBEIXZ PROC		; std::allocator<void * *>::max_size, COMDAT
; _this$ = ecx

; 217  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);

	mov	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH

; 219  : 		return (0 < _Count ? _Count : 1);

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@max_size@3
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max_size@3
$LN3@max_size@3:
	mov	DWORD PTR tv65[ebp], 1
$LN4@max_size@3:
	mov	eax, DWORD PTR tv65[ebp]

; 220  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@PAPAX@std@@QBEIXZ ENDP		; std::allocator<void * *>::max_size
_TEXT	ENDS
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -352						; size = 8
tv293 = -345						; size = 1
tv286 = -345						; size = 1
tv345 = -344						; size = 8
tv292 = -344						; size = 4
tv285 = -344						; size = 4
tv291 = -340						; size = 4
tv288 = -340						; size = 8
tv284 = -340						; size = 4
tv331 = -336						; size = 8
tv290 = -336						; size = 4
tv283 = -336						; size = 4
tv287 = -332						; size = 4
tv137 = -332						; size = 4
tv289 = -329						; size = 1
tv282 = -329						; size = 1
$T42123 = -324						; size = 4
$T42124 = -312						; size = 4
$T42125 = -300						; size = 4
$T42126 = -288						; size = 4
$T42127 = -276						; size = 4
__Ok$ = -72						; size = 8
__Pad$ = -56						; size = 8
__Count$ = -40						; size = 8
__State$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 767  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 768  : 	typedef char _Elem;
; 769  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 770  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 771  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 772  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
; 773  : 		? 0 : _Ostr.width() - _Count;

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv331[ebp], eax
	mov	DWORD PTR tv331[ebp+4], edx
	cmp	DWORD PTR tv331[ebp+4], 0
	jl	SHORT $LN17@operator@4
	jg	SHORT $LN25@operator@4
	cmp	DWORD PTR tv331[ebp], 0
	jbe	SHORT $LN17@operator@4
$LN25@operator@4:
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv345[ebp], eax
	mov	DWORD PTR tv345[ebp+4], edx
	mov	eax, DWORD PTR tv345[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator@4
	jg	SHORT $LN26@operator@4
	mov	ecx, DWORD PTR tv345[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator@4
$LN26@operator@4:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	esi, esp
	call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator@4
$LN17@operator@4:
	mov	DWORD PTR tv135[ebp], 0
	mov	DWORD PTR tv135[ebp+4], 0
$LN18@operator@4:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 774  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 775  : 
; 776  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
	cmp	eax, -1
	jne	SHORT $LN14@operator@4

; 777  : 		_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 778  : 	else

	jmp	$LN13@operator@4
$LN14@operator@4:

; 779  : 		{	// state okay, insert
; 780  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 781  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator@4
	jmp	SHORT $LN10@operator@4
$LN9@operator@4:

; 782  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN10@operator@4:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN11@operator@4
	jg	SHORT $LN27@operator@4
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN11@operator@4
$LN27@operator@4:

; 783  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 784  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv282[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv283[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv282[ebp]
	push	eax
	mov	ecx, DWORD PTR tv283[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR tv284[ebp]
	mov	DWORD PTR $T42123[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv285[ebp], eax
	mov	edx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T42124[ebp], edx
	lea	eax, DWORD PTR $T42123[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42124[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv286[ebp], al
	movzx	edx, BYTE PTR tv286[ebp]
	test	edx, edx
	je	SHORT $LN7@operator@4

; 785  : 					{	// insertion failed, quit
; 786  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 787  : 					break;

	jmp	SHORT $LN11@operator@4
$LN7@operator@4:

; 788  : 					}
; 789  : 
; 790  : 		if (_State == ios_base::goodbit

	jmp	$LN9@operator@4
$LN11@operator@4:

; 791  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator@4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv287[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv287[ebp]
	call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv288[ebp], eax
	mov	DWORD PTR tv288[ebp+4], edx
	mov	eax, DWORD PTR tv288[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN28@operator@4
	mov	ecx, DWORD PTR tv288[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN6@operator@4
$LN28@operator@4:

; 792  : 			_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax
$LN6@operator@4:

; 793  : 
; 794  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN5@operator@4
	jmp	SHORT $LN4@operator@4
$LN3@operator@4:

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator@4:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	$LN5@operator@4
	jg	SHORT $LN29@operator@4
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	$LN5@operator@4
$LN29@operator@4:

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),
; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv289[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv290[ebp], eax
	mov	esi, esp
	movzx	eax, BYTE PTR tv289[ebp]
	push	eax
	mov	ecx, DWORD PTR tv290[ebp]
	call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	DWORD PTR $T42125[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR tv292[ebp], eax
	mov	edx, DWORD PTR tv292[ebp]
	mov	DWORD PTR $T42126[ebp], edx
	lea	eax, DWORD PTR $T42125[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42126[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	mov	BYTE PTR tv293[ebp], al
	movzx	edx, BYTE PTR tv293[ebp]
	test	edx, edx
	je	SHORT $LN1@operator@4

; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

	mov	eax, DWORD PTR __State$[ebp]
	or	eax, 4
	mov	DWORD PTR __State$[ebp], eax

; 800  : 					break;

	jmp	SHORT $LN5@operator@4
$LN1@operator@4:

; 801  : 					}

	jmp	$LN3@operator@4
$LN5@operator@4:

; 802  : 		_Ostr.width(0);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN19@operator@4
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 803  : 		_CATCH_IO_(_Ostr)

	mov	esi, esp
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN13@operator@4
	ret	0
$LN19@operator@4:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN13@operator@4:

; 804  : 		}
; 805  : 
; 806  : 	_Ostr.setstate(_State);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
	cmp	esi, esp
	call	__RTC_CheckEsp

; 807  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T42127[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T42127[ebp]

; 808  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@operator@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN33@operator@4:
	DD	1
	DD	$LN32@operator@4
$LN32@operator@4:
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN30@operator@4
$LN30@operator@4:
	DB	95					; 0000005fH
	DB	79					; 0000004fH
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 490  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 491  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 492  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 552  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 553  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 562  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 563  : 		return (EOF);

	or	eax, -1

; 564  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\ostream
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 114  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 115  : 			if (_Ostr.good() && _Ostr.tie() != 0)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@sentry

; 116  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, eax
	call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@sentry:

; 117  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	ecx, edx
	call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 118  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 122  :  #if _HAS_EXCEPTIONS
; 123  : 			if (!uncaught_exception())

	mov	esi, esp
	call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@sentry@2

; 124  : 				this->_Myostr._Osfx();

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@sentry@2:

; 125  : 
; 126  :  #else /* _HAS_EXCEPTIONS */
; 127  : 			this->_Myostr._Osfx();
; 128  :  #endif /* _HAS_EXCEPTIONS */
; 129  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*, COMDAT
; _this$ = ecx

; 132  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 133  : 			return (_Ok ? _CONVERTIBLE_TO_TRUE : 0);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+4]
	neg	eax
	sbb	eax, eax
	neg	eax
	sub	eax, 1

; 134  : 			}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBEPQ_Bool_struct@2@HXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator int std::_Bool_struct::*
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 91   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 92   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas

; 93   : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas:

; 94   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 97   : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			if (_Myostr.rdbuf() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@Sentry_bas@2

; 99   : 				_Myostr.rdbuf()->_Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR [edx+4]
	mov	esi, esp
	call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv90[ebp], eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv90[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Sentry_bas@2:

; 100  : 			}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$addressof@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@AAU12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@AAU12@@Z PROC ; std::addressof<Ex48::MetaData>, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@AAU12@@Z ENDP ; std::addressof<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z PROC ; std::forward<Ex48::MetaData>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z ENDP ; std::forward<Ex48::MetaData>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z ; std::allocator<Ex48::MetaData>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z PROC ; std::_Cons_val<std::allocator<Ex48::MetaData>,Ex48::MetaData,Ex48::MetaData>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z ; std::forward<Ex48::MetaData>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z ; std::allocator<Ex48::MetaData>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z ENDP ; std::_Cons_val<std::allocator<Ex48::MetaData>,Ex48::MetaData,Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@QAVGeneration@Ex48@@@std@@YAPBQAVGeneration@Ex48@@ABQAV12@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@QAVGeneration@Ex48@@@std@@YAPBQAVGeneration@Ex48@@ABQAV12@@Z PROC ; std::addressof<Ex48::Generation * const>, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@QAVGeneration@Ex48@@@std@@YAPBQAVGeneration@Ex48@@ABQAV12@@Z ENDP ; std::addressof<Ex48::Generation * const>
_TEXT	ENDS
PUBLIC	??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z ; std::allocator<Ex48::Generation *>::construct<Ex48::Generation * &>
PUBLIC	??$forward@AAPAVGeneration@Ex48@@@std@@YAAAPAVGeneration@Ex48@@AAPAV12@@Z ; std::forward<Ex48::Generation * &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@AAPAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@AAPAV23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@AAPAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@AAPAV23@@Z PROC ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@AAPAVGeneration@Ex48@@@std@@YAAAPAVGeneration@Ex48@@AAPAV12@@Z ; std::forward<Ex48::Generation * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z ; std::allocator<Ex48::Generation *>::construct<Ex48::Generation * &>

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@AAPAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@AAPAV23@@Z ENDP ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@ABQAV34@@Z ; std::allocator<Ex48::Generation *>::construct
PUBLIC	??$forward@ABQAVGeneration@Ex48@@@std@@YAABQAVGeneration@Ex48@@ABQAV12@@Z ; std::forward<Ex48::Generation * const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@ABQAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@ABQAV23@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@ABQAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@ABQAV23@@Z PROC ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * const &>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@ABQAVGeneration@Ex48@@@std@@YAABQAVGeneration@Ex48@@ABQAV12@@Z ; std::forward<Ex48::Generation * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@ABQAV34@@Z ; std::allocator<Ex48::Generation *>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAVGeneration@Ex48@@@std@@PAVGeneration@Ex48@@ABQAV34@@std@@YAXAAV?$allocator@PAVGeneration@Ex48@@@0@PAPAVGeneration@Ex48@@ABQAV23@@Z ENDP ; std::_Cons_val<std::allocator<Ex48::Generation *>,Ex48::Generation *,Ex48::Generation * const &>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z PROC ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ; std::allocator<std::_Container_proxy>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ENDP ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z PROC ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>, COMDAT

; 286  : 	{	// destroy using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 287  : 	_Alval.destroy(_Pdest);

	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ; std::allocator<std::_Container_proxy>::destroy

; 288  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ENDP ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0UMetaData@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UMetaData@Ex48@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0UMetaData@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UMetaData@Ex48@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::MetaData>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UMetaData@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UMetaData@Ex48@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$addressof@PAPAX@std@@YAPAPAPAXAAPAPAX@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAPAX@std@@YAPAPAPAXAAPAPAX@Z PROC		; std::addressof<void * *>, COMDAT

; 110  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 111  : 	return ((_Ty *) &(char&)_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 112  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@PAPAX@std@@YAPAPAPAXAAPAPAX@Z ENDP		; std::addressof<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z PROC		; std::forward<void * *>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ENDP		; std::forward<void * *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z ; std::allocator<void * *>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Cons_val@V?$allocator@PAPAX@std@@PAPAXPAPAX@std@@YAXAAV?$allocator@PAPAX@0@PAPAPAX$$QAPAPAX@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
__Src$ = 16						; size = 4
??$_Cons_val@V?$allocator@PAPAX@std@@PAPAXPAPAX@std@@YAXAAV?$allocator@PAPAX@0@PAPAPAX$$QAPAPAX@Z PROC ; std::_Cons_val<std::allocator<void * *>,void * *,void * *>, COMDAT

; 279  : 	{	// construct using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	_Alval.construct(_Pdest, _STD forward<_Ty2>(_Src));

	mov	eax, DWORD PTR __Src$[ebp]
	push	eax
	call	??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Pdest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z ; std::allocator<void * *>::construct

; 281  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Cons_val@V?$allocator@PAPAX@std@@PAPAXPAPAX@std@@YAXAAV?$allocator@PAPAX@0@PAPAPAX$$QAPAPAX@Z ENDP ; std::_Cons_val<std::allocator<void * *>,void * *,void * *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@@Z ; std::_Uninitialized_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAUMetaData@Ex48@@@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEPAUMetaData@Ex48@@PAU23@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAUMetaData@Ex48@@@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEPAUMetaData@Ex48@@PAU23@00@Z PROC ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Umove<Ex48::MetaData *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@@Z ; std::_Uninitialized_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData> >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAUMetaData@Ex48@@@?$vector@UMetaData@Ex48@@V?$allocator@UMetaData@Ex48@@@std@@@std@@IAEPAUMetaData@Ex48@@PAU23@00@Z ENDP ; std::vector<Ex48::MetaData,std::allocator<Ex48::MetaData> >::_Umove<Ex48::MetaData *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ex48::MetaData> >
PUBLIC	??$_Ptr_cat@UMetaData@Ex48@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMetaData@Ex48@@0@Z ; std::_Ptr_cat<Ex48::MetaData,Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@@Z
_TEXT	SEGMENT
$T42208 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ex48::MetaData> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UMetaData@Ex48@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMetaData@Ex48@@0@Z ; std::_Ptr_cat<Ex48::MetaData,Ex48::MetaData>
	add	esp, 8
	mov	BYTE PTR $T42208[ebp], al
	movzx	edx, BYTE PTR $T42208[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ex48::MetaData> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ex48::MetaData> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAVGeneration@Ex48@@PAPAV12@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@@Z ; std::_Uninitialized_move<Ex48::Generation * *,Ex48::Generation * *,std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAVGeneration@Ex48@@@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEPAPAVGeneration@Ex48@@PAPAV23@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAVGeneration@Ex48@@@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEPAPAVGeneration@Ex48@@PAPAV23@00@Z PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Umove<Ex48::Generation * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAPAVGeneration@Ex48@@PAPAV12@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@@Z ; std::_Uninitialized_move<Ex48::Generation * *,Ex48::Generation * *,std::allocator<Ex48::Generation *> >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAVGeneration@Ex48@@@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEPAPAVGeneration@Ex48@@PAPAV23@00@Z ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Umove<Ex48::Generation * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ex48::Generation *> >
PUBLIC	??$_Ptr_cat@PAVGeneration@Ex48@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVGeneration@Ex48@@0@Z ; std::_Ptr_cat<Ex48::Generation *,Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@@Z
_TEXT	SEGMENT
$T42213 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@@Z PROC ; std::_Destroy_range<std::allocator<Ex48::Generation *> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVGeneration@Ex48@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVGeneration@Ex48@@0@Z ; std::_Ptr_cat<Ex48::Generation *,Ex48::Generation *>
	add	esp, 8
	mov	BYTE PTR $T42213[ebp], al
	movzx	edx, BYTE PTR $T42213[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<Ex48::Generation *> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ex48::Generation *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<void * *> >
PUBLIC	??$_Ptr_cat@PAPAXPAPAX@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAX0@Z ; std::_Ptr_cat<void * *,void * *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@@Z
_TEXT	SEGMENT
$T42216 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@@Z PROC ; std::_Destroy_range<std::allocator<void * *> >, COMDAT

; 87   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAXPAPAX@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAX0@Z ; std::_Ptr_cat<void * *,void * *>
	add	esp, 8
	mov	BYTE PTR $T42216[ebp], al
	movzx	edx, BYTE PTR $T42216[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::allocator<void * *> >
	add	esp, 16					; 00000010H

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@@Z ENDP ; std::_Destroy_range<std::allocator<void * *> >
_TEXT	ENDS
PUBLIC	??0bad_alloc@std@@QAE@PBD@Z			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
$T42219 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@3

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@3
$LN4@Allocate@3:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate@3
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@3
$LN1@Allocate@3:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T42219[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T42219[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@3:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@3:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
EXTRN	__imp_??0exception@std@@QAE@ABQBD@Z:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\exception
;	COMDAT ??0bad_alloc@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@QAE@PBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 345  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	lea	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0exception@std@@QAE@ABQBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 346  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@PBD@Z ENDP			; std::bad_alloc::bad_alloc
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@IPAU12@@Z
_TEXT	SEGMENT
$T42224 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@IPAU12@@Z PROC ; std::_Allocate<Ex48::MetaData>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@4

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@4
$LN4@Allocate@4:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate@4
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@4
$LN1@Allocate@4:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T42224[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T42224[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@4:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@4:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@UMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@IPAU12@@Z ENDP ; std::_Allocate<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@IPAPAV12@@Z
_TEXT	SEGMENT
$T42227 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@IPAPAV12@@Z PROC ; std::_Allocate<Ex48::Generation *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@5

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@5
$LN4@Allocate@5:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate@5
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@5
$LN1@Allocate@5:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T42227[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T42227[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@5:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@5:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@IPAPAV12@@Z ENDP ; std::_Allocate<Ex48::Generation *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_move@PAPAPAXPAPAPAXV?$allocator@PAPAX@std@@@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@@Z ; std::_Uninitialized_move<void * * *,void * * *,std::allocator<void * *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??$_Umove@PAPAPAX@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEPAPAPAXPAPAPAX00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Umove@PAPAPAX@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEPAPAPAXPAPAPAX00@Z PROC ; std::vector<void * *,std::allocator<void * *> >::_Umove<void * * *>, COMDAT
; _this$ = ecx

; 1322 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1323 : 		{	// move initializing [_First, _Last), using allocator
; 1324 : 		return (_Uninitialized_move(_First, _Last,
; 1325 : 			_Ptr, this->_Alval));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAPAPAXPAPAPAXV?$allocator@PAPAX@std@@@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@@Z ; std::_Uninitialized_move<void * * *,void * * *,std::allocator<void * *> >
	add	esp, 16					; 00000010H

; 1326 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Umove@PAPAPAX@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEPAPAPAXPAPAPAX00@Z ENDP ; std::vector<void * *,std::allocator<void * *> >::_Umove<void * * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAPAX@std@@YAPAPAPAXIPAPAPAX@Z
_TEXT	SEGMENT
$T42232 = -220						; size = 12
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAPAX@std@@YAPAPAPAXIPAPAPAX@Z PROC	; std::_Allocate<void * *>, COMDAT

; 30   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 31   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 32   : 
; 33   : 	if (_Count <= 0)

	cmp	DWORD PTR __Count$[ebp], 0
	ja	SHORT $LN4@Allocate@6

; 34   : 		_Count = 0;

	mov	DWORD PTR __Count$[ebp], 0

; 35   : 	else if (((_SIZT)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate@6
$LN4@Allocate@6:

; 36   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	ja	SHORT $LN1@Allocate@6
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate@6
$LN1@Allocate@6:

; 37   : 		_THROW_NCEE(bad_alloc, 0);

	push	0
	lea	ecx, DWORD PTR $T42232[ebp]
	call	??0bad_alloc@std@@QAE@PBD@Z		; std::bad_alloc::bad_alloc
	push	OFFSET __TI2?AVbad_alloc@std@@
	lea	eax, DWORD PTR $T42232[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@Allocate@6:

; 38   : 
; 39   : 	return ((_Ty _FARQ *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate@6:

; 40   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@PAPAX@std@@YAPAPAPAXIPAPAPAX@Z ENDP	; std::_Allocate<void * *>
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z$0
__ehfuncinfo$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T42235 = -236						; size = 4
$T42236 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z PROC ; std::allocator<Ex48::MetaData>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T42236[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T42236[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@UMetaData@Ex48@@@std@@YA$$QAUMetaData@Ex48@@AAU12@@Z ; std::forward<Ex48::MetaData>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T42236[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T42236[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T42235[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T42236[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@$$QAU34@@Z ENDP ; std::allocator<Ex48::MetaData>::construct
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 56   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 57   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 58   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 61   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z ; std::_Construct<Ex48::Generation *,Ex48::Generation * const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?construct@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@ABQAV34@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@ABQAV34@@Z PROC ; std::allocator<Ex48::Generation *>::construct, COMDAT
; _this$ = ecx

; 196  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 		_Construct(_Ptr, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z ; std::_Construct<Ex48::Generation *,Ex48::Generation * const &>
	add	esp, 8

; 198  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?construct@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@ABQAV34@@Z ENDP ; std::allocator<Ex48::Generation *>::construct
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z$0
__ehfuncinfo$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T42254 = -236						; size = 4
$T42255 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z PROC ; std::allocator<void * *>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T42255[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T42255[ebp], 0
	je	SHORT $LN3@construct@2
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@PAPAX@std@@YA$$QAPAPAXAAPAPAX@Z ; std::forward<void * *>
	add	esp, 4
	mov	edx, DWORD PTR $T42255[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T42255[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct@2
$LN3@construct@2:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct@2:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T42254[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T42255[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@PAPAX@std@@QAEXPAPAPAX$$QAPAPAX@Z ENDP ; std::allocator<void * *>::construct
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0
__ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T42267 = -236						; size = 4
$T42268 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z PROC ; std::allocator<std::_Container_proxy>::construct, COMDAT
; _this$ = ecx

; 201  : 		{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 202  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Ty>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T42268[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T42268[ebp], 0
	je	SHORT $LN3@construct@3
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T42268[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T42268[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct@3
$LN3@construct@3:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct@3:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T42267[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 203  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T42268[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?construct@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@$$QAU32@@Z ENDP ; std::allocator<std::_Container_proxy>::construct
PUBLIC	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z PROC ; std::allocator<std::_Container_proxy>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ; std::_Destroy<std::_Container_proxy>
	add	esp, 4

; 214  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
_TEXT	ENDS
;	COMDAT ??$forward@AAPAVGeneration@Ex48@@@std@@YAAAPAVGeneration@Ex48@@AAPAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAVGeneration@Ex48@@@std@@YAAAPAVGeneration@Ex48@@AAPAV12@@Z PROC ; std::forward<Ex48::Generation * &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAVGeneration@Ex48@@@std@@YAAAPAVGeneration@Ex48@@AAPAV12@@Z ENDP ; std::forward<Ex48::Generation * &>
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z$0
__ehfuncinfo$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T42284 = -236						; size = 4
$T42285 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z PROC ; std::allocator<Ex48::Generation *>::construct<Ex48::Generation * &>, COMDAT
; _this$ = ecx

; 206  : 		void construct(pointer _Ptr, _Other&& _Val)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 207  : 		{	// construct object at _Ptr with value _Val
; 208  : 		::new ((void _FARQ *)_Ptr) _Ty(_STD forward<_Other>(_Val));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T42285[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T42285[ebp], 0
	je	SHORT $LN3@construct@4
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@AAPAVGeneration@Ex48@@@std@@YAAAPAVGeneration@Ex48@@AAPAV12@@Z ; std::forward<Ex48::Generation * &>
	add	esp, 4
	mov	edx, DWORD PTR $T42285[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T42285[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct@4
$LN3@construct@4:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct@4:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T42284[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 209  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T42285[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@AAPAVGeneration@Ex48@@@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@AAPAV23@@Z ENDP ; std::allocator<Ex48::Generation *>::construct<Ex48::Generation * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\utility
;	COMDAT ??$forward@ABQAVGeneration@Ex48@@@std@@YAABQAVGeneration@Ex48@@ABQAV12@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVGeneration@Ex48@@@std@@YAABQAVGeneration@Ex48@@ABQAV12@@Z PROC ; std::forward<Ex48::Generation * const &>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABQAVGeneration@Ex48@@@std@@YAABQAVGeneration@Ex48@@ABQAV12@@Z ENDP ; std::forward<Ex48::Generation * const &>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 78   : 	{	// forward _Arg, given explicitly specified type parameter

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 79   : 	return ((_Ty&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 80   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData>,Ex48::MetaData>
PUBLIC	??$_Val_type@PAUMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@PAU12@@Z ; std::_Val_type<Ex48::MetaData *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@@Z
_TEXT	SEGMENT
$T42301 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@@Z PROC ; std::_Uninitialized_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@UMetaData@Ex48@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMetaData@Ex48@@0@Z ; std::_Ptr_cat<Ex48::MetaData,Ex48::MetaData>
	add	esp, 8
	mov	BYTE PTR $T42301[ebp], al
	movzx	edx, BYTE PTR $T42301[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAUMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@PAU12@@Z ; std::_Val_type<Ex48::MetaData *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData>,Ex48::MetaData>
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@@Z ENDP ; std::_Uninitialized_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UMetaData@Ex48@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMetaData@Ex48@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UMetaData@Ex48@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMetaData@Ex48@@0@Z PROC ; std::_Ptr_cat<Ex48::MetaData,Ex48::MetaData>, COMDAT

; 528  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 529  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 530  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 531  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat:
	DD	1
	DD	$LN4@Ptr_cat
$LN4@Ptr_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat
$LN3@Ptr_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@UMetaData@Ex48@@U12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMetaData@Ex48@@0@Z ENDP ; std::_Ptr_cat<Ex48::MetaData,Ex48::MetaData>
_TEXT	ENDS
PUBLIC	??$_Dest_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@@Z ; std::_Dest_val<std::allocator<Ex48::MetaData>,Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ex48::MetaData> >, COMDAT

; 95   : 	{	// destroy [_First, _Last), arbitrary type

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 96   : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN3@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 8
	mov	DWORD PTR __First$[ebp], eax
$LN3@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Destroy_ra

; 97   : 		_Dest_val(_Al, _First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Dest_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@@Z ; std::_Dest_val<std::allocator<Ex48::MetaData>,Ex48::MetaData>
	add	esp, 8
	jmp	SHORT $LN2@Destroy_ra
$LN4@Destroy_ra:

; 98   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UMetaData@Ex48@@@std@@@std@@YAXPAUMetaData@Ex48@@0AAV?$allocator@UMetaData@Ex48@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ex48::MetaData> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAVGeneration@Ex48@@PAV12@PAV12@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Ex48::Generation *,Ex48::Generation *,Ex48::Generation *>
PUBLIC	??$_Val_type@PAPAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@@Z ; std::_Val_type<Ex48::Generation * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAVGeneration@Ex48@@PAPAV12@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@@Z
_TEXT	SEGMENT
$T42311 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVGeneration@Ex48@@PAPAV12@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@@Z PROC ; std::_Uninitialized_move<Ex48::Generation * *,Ex48::Generation * *,std::allocator<Ex48::Generation *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAVGeneration@Ex48@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVGeneration@Ex48@@0@Z ; std::_Ptr_cat<Ex48::Generation *,Ex48::Generation *>
	add	esp, 8
	mov	BYTE PTR $T42311[ebp], al
	movzx	edx, BYTE PTR $T42311[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@@Z ; std::_Val_type<Ex48::Generation * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAVGeneration@Ex48@@PAV12@PAV12@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<Ex48::Generation *,Ex48::Generation *,Ex48::Generation *>
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVGeneration@Ex48@@PAPAV12@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@@Z ENDP ; std::_Uninitialized_move<Ex48::Generation * *,Ex48::Generation * *,std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVGeneration@Ex48@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVGeneration@Ex48@@0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVGeneration@Ex48@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVGeneration@Ex48@@0@Z PROC ; std::_Ptr_cat<Ex48::Generation *,Ex48::Generation *>, COMDAT

; 528  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 529  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 530  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 531  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@2:
	DD	1
	DD	$LN4@Ptr_cat@2
$LN4@Ptr_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@2
$LN3@Ptr_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAVGeneration@Ex48@@PAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVGeneration@Ex48@@0@Z ENDP ; std::_Ptr_cat<Ex48::Generation *,Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<Ex48::Generation *> >, COMDAT

; 104  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@YAXPAPAVGeneration@Ex48@@0AAV?$allocator@PAVGeneration@Ex48@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAPAXPAPAX@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAX0@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAPAXPAPAX@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAX0@Z PROC ; std::_Ptr_cat<void * *,void * *>, COMDAT

; 528  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 529  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
; 530  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 531  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Ptr_cat@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Ptr_cat@3:
	DD	1
	DD	$LN4@Ptr_cat@3
$LN4@Ptr_cat@3:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Ptr_cat@3
$LN3@Ptr_cat@3:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Ptr_cat@PAPAXPAPAX@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAX0@Z ENDP ; std::_Ptr_cat<void * *,void * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::allocator<void * *> >, COMDAT

; 104  : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAPAX@std@@@std@@YAXPAPAPAX0AAV?$allocator@PAPAX@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::allocator<void * *> >
_TEXT	ENDS
PUBLIC	??$_Uninit_move@PAPAXPAPAXPAPAX@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<void * *,void * *,void * *>
PUBLIC	??$_Val_type@PAPAPAX@std@@YAPAPAPAXPAPAPAX@Z	; std::_Val_type<void * * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninitialized_move@PAPAPAXPAPAPAXV?$allocator@PAPAX@std@@@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@@Z
_TEXT	SEGMENT
$T42328 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAPAXPAPAPAXV?$allocator@PAPAX@std@@@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@@Z PROC ; std::_Uninitialized_move<void * * *,void * * *,std::allocator<void * *> >, COMDAT

; 469  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 470  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 471  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@PAPAXPAPAX@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAX0@Z ; std::_Ptr_cat<void * *,void * *>
	add	esp, 8
	mov	BYTE PTR $T42328[ebp], al
	movzx	edx, BYTE PTR $T42328[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Val_type@PAPAPAX@std@@YAPAPAPAXPAPAPAX@Z ; std::_Val_type<void * * *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninit_move@PAPAXPAPAXPAPAX@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<void * *,void * *,void * *>
	add	esp, 24					; 00000018H

; 472  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAPAXPAPAPAXV?$allocator@PAPAX@std@@@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@@Z ENDP ; std::_Uninitialized_move<void * * *,void * * *,std::allocator<void * *> >
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
xdata$x	SEGMENT
__unwindtable$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z$0
__ehfuncinfo$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T42331 = -236						; size = 4
$T42332 = -224						; size = 4
__Vptr$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z PROC ; std::_Construct<Ex48::Generation *,Ex48::Generation * const &>, COMDAT

; 46   : 	{	// construct object at _Ptr with value _Val

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 47   : 	void _FARQ *_Vptr = _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR __Vptr$[ebp], eax

; 48   : 	::new (_Vptr) _Ty1(_STD forward<_Ty2>(_Val));

	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T42332[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T42332[ebp], 0
	je	SHORT $LN3@Construct
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	call	??$forward@ABQAVGeneration@Ex48@@@std@@YAABQAVGeneration@Ex48@@ABQAV12@@Z ; std::forward<Ex48::Generation * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T42332[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T42332[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@Construct
$LN3@Construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@Construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T42331[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 49   : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z$0:
	mov	eax, DWORD PTR __Vptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T42332[ebp]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@PAVGeneration@Ex48@@ABQAV12@@std@@YAXPAPAVGeneration@Ex48@@ABQAV12@@Z ENDP ; std::_Construct<Ex48::Generation *,Ex48::Generation * const &>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z PROC ; std::_Destroy<std::_Container_proxy>, COMDAT

; 62   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@U_Container_proxy@std@@@std@@YAXPAU_Container_proxy@0@@Z ENDP ; std::_Destroy<std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAUMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@PAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAUMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@PAU12@@Z PROC ; std::_Val_type<Ex48::MetaData *>, COMDAT

; 801  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 802  : 	return (0);

	xor	eax, eax

; 803  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAUMetaData@Ex48@@@std@@YAPAUMetaData@Ex48@@PAU12@@Z ENDP ; std::_Val_type<Ex48::MetaData *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::MetaData>
PUBLIC	??$_Debug_range@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WI@Z ; std::_Debug_range<Ex48::MetaData *>
PUBLIC	??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
;	COMDAT ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
CONST	SEGMENT
??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '0', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'm', 00H, 'e', 00H, 'm'
	DB	00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0
__unwindtable$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$2
__ehfuncinfo$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData>,Ex48::MetaData>, COMDAT

; 424  : 	{	// move [_First, _Last) to raw _Dest, using _Al, arbitrary type

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 425  : 	_DEBUG_RANGE(_First, _Last);

	push	425					; 000001a9H
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WI@Z ; std::_Debug_range<Ex48::MetaData *>
	add	esp, 16					; 00000010H

; 426  : 	_DEBUG_POINTER(_Dest);

	push	426					; 000001aaH
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::MetaData>
	add	esp, 12					; 0000000cH

; 427  : 	_FwdIt _Next = _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Next$[ebp], eax

; 428  : 
; 429  : 	_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN6@Uninit_mov
$LN5@Uninit_mov:

; 430  : 	for (; _First != _Last; ++_Dest, ++_First)

	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 8
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 8
	mov	DWORD PTR __First$[ebp], ecx
$LN6@Uninit_mov:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN4@Uninit_mov

; 431  : 		_Cons_val(_Al, _Dest, (_Valty &&)*_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@U34@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@$$QAU23@@Z ; std::_Cons_val<std::allocator<Ex48::MetaData>,Ex48::MetaData,Ex48::MetaData>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN5@Uninit_mov
$LN4@Uninit_mov:
	jmp	SHORT $LN10@Uninit_mov
__catch$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$0:

; 432  : 	_CATCH_ALL

	jmp	SHORT $LN3@Uninit_mov
$LN2@Uninit_mov:

; 433  : 	for (; _Next != _Dest; ++_Next)

	mov	eax, DWORD PTR __Next$[ebp]
	add	eax, 8
	mov	DWORD PTR __Next$[ebp], eax
$LN3@Uninit_mov:
	mov	eax, DWORD PTR __Next$[ebp]
	cmp	eax, DWORD PTR __Dest$[ebp]
	je	SHORT $LN1@Uninit_mov

; 434  : 		_Dest_val(_Al, _Next);

	mov	eax, DWORD PTR __Next$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Dest_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@@Z ; std::_Dest_val<std::allocator<Ex48::MetaData>,Ex48::MetaData>
	add	esp, 8
	jmp	SHORT $LN2@Uninit_mov
$LN1@Uninit_mov:

; 435  : 	_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 436  : 	_CATCH_END

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
	ret	0
$LN10@Uninit_mov:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1:

; 437  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
$LN9@Uninit_mov:

; 438  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-224]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninit_move@PAUMetaData@Ex48@@PAU12@V?$allocator@UMetaData@Ex48@@@std@@U12@@std@@YAPAUMetaData@Ex48@@PAU12@00AAV?$allocator@UMetaData@Ex48@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ex48::MetaData *,Ex48::MetaData *,std::allocator<Ex48::MetaData>,Ex48::MetaData>
PUBLIC	?destroy@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@@Z ; std::allocator<Ex48::MetaData>::destroy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??$_Dest_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@@Z
_TEXT	SEGMENT
__Alval$ = 8						; size = 4
__Pdest$ = 12						; size = 4
??$_Dest_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@@Z PROC ; std::_Dest_val<std::allocator<Ex48::MetaData>,Ex48::MetaData>, COMDAT

; 286  : 	{	// destroy using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 287  : 	_Alval.destroy(_Pdest);

	mov	eax, DWORD PTR __Pdest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alval$[ebp]
	call	?destroy@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@@Z ; std::allocator<Ex48::MetaData>::destroy

; 288  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Dest_val@V?$allocator@UMetaData@Ex48@@@std@@UMetaData@Ex48@@@std@@YAXAAV?$allocator@UMetaData@Ex48@@@0@PAUMetaData@Ex48@@@Z ENDP ; std::_Dest_val<std::allocator<Ex48::MetaData>,Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAPAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@@Z PROC ; std::_Val_type<Ex48::Generation * *>, COMDAT

; 801  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 802  : 	return (0);

	xor	eax, eax

; 803  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAPAVGeneration@Ex48@@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@@Z ENDP ; std::_Val_type<Ex48::Generation * *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::Generation *>
PUBLIC	??$_Debug_range@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WI@Z ; std::_Debug_range<Ex48::Generation * *>
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAVGeneration@Ex48@@PAV12@PAV12@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAVGeneration@Ex48@@PAV12@PAV12@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<Ex48::Generation *,Ex48::Generation *,Ex48::Generation *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 457  : 	_DEBUG_RANGE(_First, _Last);

	push	457					; 000001c9H
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WI@Z ; std::_Debug_range<Ex48::Generation * *>
	add	esp, 16					; 00000010H

; 458  : 	_DEBUG_POINTER(_Dest);

	push	458					; 000001caH
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::Generation *>
	add	esp, 12					; 0000000cH

; 459  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 462  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAVGeneration@Ex48@@PAV12@PAV12@@std@@YAPAPAVGeneration@Ex48@@PAPAV12@00AAV?$allocator@PAVGeneration@Ex48@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<Ex48::Generation *,Ex48::Generation *,Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Val_type@PAPAPAX@std@@YAPAPAPAXPAPAPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$_Val_type@PAPAPAX@std@@YAPAPAPAXPAPAPAX@Z PROC	; std::_Val_type<void * * *>, COMDAT

; 801  : 	{	// return value type from arbitrary argument

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 802  : 	return (0);

	xor	eax, eax

; 803  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Val_type@PAPAPAX@std@@YAPAPAPAXPAPAPAX@Z ENDP	; std::_Val_type<void * * *>
_TEXT	ENDS
PUBLIC	??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z	; std::_Debug_pointer<void * *>
PUBLIC	??$_Debug_range@PAPAPAX@std@@YAXPAPAPAX0PB_WI@Z	; std::_Debug_range<void * * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\memory
;	COMDAT ??$_Uninit_move@PAPAXPAPAXPAPAX@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
___formal$ = 28						; size = 1
??$_Uninit_move@PAPAXPAPAXPAPAX@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<void * *,void * *,void * *>, COMDAT

; 456  : 	{	// move [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 457  : 	_DEBUG_RANGE(_First, _Last);

	push	457					; 000001c9H
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Debug_range@PAPAPAX@std@@YAXPAPAPAX0PB_WI@Z ; std::_Debug_range<void * * *>
	add	esp, 16					; 00000010H

; 458  : 	_DEBUG_POINTER(_Dest);

	push	458					; 000001caH
	push	OFFSET ??_C@_1IM@EJIMMBE@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z ; std::_Debug_pointer<void * *>
	add	esp, 12					; 0000000cH

; 459  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	sar	eax, 2
	mov	DWORD PTR __Count$[ebp], eax

; 460  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 461  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR __Count$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 462  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_move@PAPAXPAPAXPAPAX@std@@YAPAPAPAXPAPAPAX00AAV?$allocator@PAPAX@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<void * *,void * *,void * *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@@Z ; std::_Destroy<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ?destroy@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@@Z PROC ; std::allocator<Ex48::MetaData>::destroy, COMDAT
; _this$ = ecx

; 212  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  : 		_Destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@@Z ; std::_Destroy<Ex48::MetaData>
	add	esp, 4

; 214  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?destroy@?$allocator@UMetaData@Ex48@@@std@@QAEXPAUMetaData@Ex48@@@Z ENDP ; std::allocator<Ex48::MetaData>::destroy
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Ex48::MetaData *>
PUBLIC	??$_Iter_cat@PAUMetaData@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMetaData@Ex48@@@Z ; std::_Iter_cat<Ex48::MetaData *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
;	COMDAT ??$_Debug_range@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WI@Z
_TEXT	SEGMENT
$T42375 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WI@Z PROC ; std::_Debug_range<Ex48::MetaData *>, COMDAT

; 739  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 740  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42375[ebp]
	push	ecx
	call	??$_Iter_cat@PAUMetaData@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMetaData@Ex48@@@Z ; std::_Iter_cat<Ex48::MetaData *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Ex48::MetaData *>
	add	esp, 20					; 00000014H

; 741  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WI@Z ENDP ; std::_Debug_range<Ex48::MetaData *>
_TEXT	ENDS
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z PROC ; std::_Debug_pointer<Ex48::MetaData>, COMDAT

; 708  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 709  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 710  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin:

; 711  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z ENDP ; std::_Debug_pointer<Ex48::MetaData>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Ex48::Generation * *>
PUBLIC	??$_Iter_cat@PAPAVGeneration@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVGeneration@Ex48@@@Z ; std::_Iter_cat<Ex48::Generation * *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Debug_range@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WI@Z
_TEXT	SEGMENT
$T42380 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WI@Z PROC ; std::_Debug_range<Ex48::Generation * *>, COMDAT

; 739  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 740  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42380[ebp]
	push	ecx
	call	??$_Iter_cat@PAPAVGeneration@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVGeneration@Ex48@@@Z ; std::_Iter_cat<Ex48::Generation * *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<Ex48::Generation * *>
	add	esp, 20					; 00000014H

; 741  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WI@Z ENDP ; std::_Debug_range<Ex48::Generation * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z PROC ; std::_Debug_pointer<Ex48::Generation *>, COMDAT

; 708  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 709  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@2

; 710  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin@2:

; 711  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z ENDP ; std::_Debug_pointer<Ex48::Generation *>
_TEXT	ENDS
PUBLIC	??$_Debug_range2@PAPAPAX@std@@YAXPAPAPAX0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<void * * *>
PUBLIC	??$_Iter_cat@PAPAPAX@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAX@Z ; std::_Iter_cat<void * * *>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$_Debug_range@PAPAPAX@std@@YAXPAPAPAX0PB_WI@Z
_TEXT	SEGMENT
$T42385 = -197						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
??$_Debug_range@PAPAPAX@std@@YAXPAPAPAX0PB_WI@Z PROC	; std::_Debug_range<void * * *>, COMDAT

; 739  : 	{	// test iterator pair for valid range

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 740  : 	_Debug_range2(_First, _Last, _File, _Line, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T42385[ebp]
	push	ecx
	call	??$_Iter_cat@PAPAPAX@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAX@Z ; std::_Iter_cat<void * * *>
	add	esp, 8
	movzx	edx, BYTE PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Debug_range2@PAPAPAX@std@@YAXPAPAPAX0PB_WIUrandom_access_iterator_tag@0@@Z ; std::_Debug_range2<void * * *>
	add	esp, 20					; 00000014H

; 741  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range@PAPAPAX@std@@YAXPAPAPAX0PB_WI@Z ENDP	; std::_Debug_range<void * * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z PROC	; std::_Debug_pointer<void * *>, COMDAT

; 708  : 	{	// test iterator for non-singularity, pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 709  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin@3

; 710  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin@3:

; 711  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z ENDP	; std::_Debug_pointer<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ??$_Destroy@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@@Z PROC ; std::_Destroy<Ex48::MetaData>, COMDAT

; 62   : 	{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 63   : 	_Ptr->~_Ty();
; 64   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@@Z ENDP ; std::_Destroy<Ex48::MetaData>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xutility
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAUMetaData@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMetaData@Ex48@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAUMetaData@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMetaData@Ex48@@@Z PROC ; std::_Iter_cat<Ex48::MetaData *>, COMDAT

; 488  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 489  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 490  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 491  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat:
	DD	1
	DD	$LN4@Iter_cat
$LN4@Iter_cat:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat
$LN3@Iter_cat:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAUMetaData@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMetaData@Ex48@@@Z ENDP ; std::_Iter_cat<Ex48::MetaData *>
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??$_Debug_range2@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<Ex48::MetaData *>, COMDAT

; 726  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 727  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang

; 728  : 		{	// check for non-null pointers, valid range
; 729  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::MetaData>
	add	esp, 12					; 0000000cH

; 730  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@UMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::MetaData>
	add	esp, 12					; 0000000cH

; 731  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang

; 732  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang:

; 733  : 		}
; 734  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAUMetaData@Ex48@@@std@@YAXPAUMetaData@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<Ex48::MetaData *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAVGeneration@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVGeneration@Ex48@@@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAVGeneration@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVGeneration@Ex48@@@Z PROC ; std::_Iter_cat<Ex48::Generation * *>, COMDAT

; 488  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 489  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 490  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 491  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@2:
	DD	1
	DD	$LN4@Iter_cat@2
$LN4@Iter_cat@2:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@2
$LN3@Iter_cat@2:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAPAVGeneration@Ex48@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVGeneration@Ex48@@@Z ENDP ; std::_Iter_cat<Ex48::Generation * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_range2@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<Ex48::Generation * *>, COMDAT

; 726  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 727  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@2

; 728  : 		{	// check for non-null pointers, valid range
; 729  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::Generation *>
	add	esp, 12					; 0000000cH

; 730  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@PAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@PB_WI@Z ; std::_Debug_pointer<Ex48::Generation *>
	add	esp, 12					; 0000000cH

; 731  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@2

; 732  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang@2:

; 733  : 		}
; 734  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAPAVGeneration@Ex48@@@std@@YAXPAPAVGeneration@Ex48@@0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<Ex48::Generation * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@PAPAPAX@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAX@Z
_TEXT	SEGMENT
__Cat$ = -5						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAPAPAX@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAX@Z PROC ; std::_Iter_cat<void * * *>, COMDAT

; 488  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 489  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 490  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 491  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Iter_cat@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Iter_cat@3:
	DD	1
	DD	$LN4@Iter_cat@3
$LN4@Iter_cat@3:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Iter_cat@3
$LN3@Iter_cat@3:
	DB	95					; 0000005fH
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
??$_Iter_cat@PAPAPAX@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAPAX@Z ENDP ; std::_Iter_cat<void * * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Debug_range2@PAPAPAX@std@@YAXPAPAPAX0PB_WIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__File$ = 16						; size = 4
__Line$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Debug_range2@PAPAPAX@std@@YAXPAPAPAX0PB_WIUrandom_access_iterator_tag@0@@Z PROC ; std::_Debug_range2<void * * *>, COMDAT

; 726  : 	{	// test iterator pair for valid range, random-access iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 727  : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Debug_rang@3

; 728  : 		{	// check for non-null pointers, valid range
; 729  : 		_DEBUG_POINTER2(_First, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z ; std::_Debug_pointer<void * *>
	add	esp, 12					; 0000000cH

; 730  : 		_DEBUG_POINTER2(_Last, _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Debug_pointer@PAPAX@std@@YAXPAPAPAXPB_WI@Z ; std::_Debug_pointer<void * *>
	add	esp, 12					; 0000000cH

; 731  : 		if (_Last < _First)

	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jae	SHORT $LN3@Debug_rang@3

; 732  : 			_DEBUG_ERROR2("invalid iterator range", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Debug_rang@3:

; 733  : 		}
; 734  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_range2@PAPAPAX@std@@YAXPAPAPAX0PB_WIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Debug_range2<void * * *>
_TEXT	ENDS
PUBLIC	??0?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\ali\samples\c++\examples 2\memorymanagement\memorymanagement\e48.cpp
;	COMDAT ??__E?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ PROC ; `dynamic initializer for 'Ex48::HeapManager::gen'', COMDAT

; 90   : 	vector<Generation*> HeapManager::gen;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	??0?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >
	push	OFFSET ??__F?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'Ex48::HeapManager::gen''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ ENDP ; `dynamic initializer for 'Ex48::HeapManager::gen''
text$yc	ENDS
PUBLIC	??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >
PUBLIC	??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@XZ	; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T42416 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T42416[ebp], esp
	call	??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@XZ ; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >
_TEXT	ENDS
PUBLIC	??$?0PAVGeneration@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVGeneration@Ex48@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::Generation *>
PUBLIC	??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@ABV01@@Z ; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z
_TEXT	SEGMENT
$T42420 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z PROC ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@ABV01@@Z ; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0PAVGeneration@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVGeneration@Ex48@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::Generation *>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T42420[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Vector_val@3:
	DD	1
	DD	$LN6@Vector_val@3
$LN6@Vector_val@3:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@3
$LN4@Vector_val@3:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@V?$allocator@PAVGeneration@Ex48@@@1@@Z ENDP ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@XZ PROC	; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@XZ ENDP	; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@ABV01@@Z PROC ; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAVGeneration@Ex48@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<Ex48::Generation *>::allocator<Ex48::Generation *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0PAVGeneration@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVGeneration@Ex48@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0PAVGeneration@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVGeneration@Ex48@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::Generation *>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVGeneration@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVGeneration@Ex48@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::Generation *>
_TEXT	ENDS
PUBLIC	??0?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::vector<void * *,std::allocator<void * *> >::vector<void * *,std::allocator<void * *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\ali\samples\c++\examples 2\memorymanagement\memorymanagement\e48.cpp
;	COMDAT ??__Estack@Ex48@@YAXXZ
text$yc	SEGMENT
??__Estack@Ex48@@YAXXZ PROC				; Ex48::`dynamic initializer for 'stack'', COMDAT

; 92   : 	vector<void**> stack;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	??0?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::vector<void * *,std::allocator<void * *> >::vector<void * *,std::allocator<void * *> >
	push	OFFSET ??__Fstack@Ex48@@YAXXZ		; Ex48::`dynamic atexit destructor for 'stack''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Estack@Ex48@@YAXXZ ENDP				; Ex48::`dynamic initializer for 'stack''
text$yc	ENDS
PUBLIC	??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z ; std::_Vector_val<void * *,std::allocator<void * *> >::_Vector_val<void * *,std::allocator<void * *> >
PUBLIC	??0?$allocator@PAPAX@std@@QAE@XZ		; std::allocator<void * *>::allocator<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
;	COMDAT ??0?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T42441 = -212						; size = 4
_this$ = -8						; size = 4
??0?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ PROC ; std::vector<void * *,std::allocator<void * *> >::vector<void * *,std::allocator<void * *> >, COMDAT
; _this$ = ecx

; 507  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T42441[ebp], esp
	call	??0?$allocator@PAPAX@std@@QAE@XZ	; std::allocator<void * *>::allocator<void * *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z ; std::_Vector_val<void * *,std::allocator<void * *> >::_Vector_val<void * *,std::allocator<void * *> >

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ENDP ; std::vector<void * *,std::allocator<void * *> >::vector<void * *,std::allocator<void * *> >
_TEXT	ENDS
PUBLIC	??$?0PAPAX@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAPAX@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><void * *>
PUBLIC	??0?$allocator@PAPAX@std@@QAE@ABV01@@Z		; std::allocator<void * *>::allocator<void * *>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z$0
__ehfuncinfo$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z
_TEXT	SEGMENT
$T42445 = -240						; size = 8
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 1
??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z PROC ; std::_Vector_val<void * *,std::allocator<void * *> >::_Vector_val<void * *,std::allocator<void * *> >, COMDAT
; _this$ = ecx

; 439  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$allocator@PAPAX@std@@QAE@ABV01@@Z	; std::allocator<void * *>::allocator<void * *>

; 440  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 441  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0PAPAX@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAPAX@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><void * *>

; 442  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 443  : 		_Cons_val(_Alproxy, this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T42445[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Cons_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@U32@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@$$QAU20@@Z ; std::_Cons_val<std::allocator<std::_Container_proxy>,std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 444  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 445  : 
; 446  : 		_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 447  : 		_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 448  : 		_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 449  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@Vector_val@4:
	DD	1
	DD	$LN6@Vector_val@4
$LN6@Vector_val@4:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@4
$LN4@Vector_val@4:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@V?$allocator@PAPAX@1@@Z ENDP ; std::_Vector_val<void * *,std::allocator<void * *> >::_Vector_val<void * *,std::allocator<void * *> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xmemory
;	COMDAT ??0?$allocator@PAPAX@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@PAPAX@std@@QAE@XZ PROC			; std::allocator<void * *>::allocator<void * *>, COMDAT
; _this$ = ecx

; 161  : 	_ALLOCATOR() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 162  : 		{	// construct default allocator (do nothing)
; 163  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAPAX@std@@QAE@XZ ENDP			; std::allocator<void * *>::allocator<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAPAX@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@PAPAX@std@@QAE@ABV01@@Z PROC		; std::allocator<void * *>::allocator<void * *>, COMDAT
; _this$ = ecx

; 165  : 	_ALLOCATOR(const _ALLOCATOR<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 166  : 		{	// construct by copying (do nothing)
; 167  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@PAPAX@std@@QAE@ABV01@@Z ENDP		; std::allocator<void * *>::allocator<void * *>
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$?0PAPAX@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAPAX@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0PAPAX@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAPAX@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><void * *>, COMDAT
; _this$ = ecx

; 170  : 		_ALLOCATOR(const _ALLOCATOR<_Other>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 171  : 		{	// construct from a related allocator (do nothing)
; 172  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAPAX@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAPAX@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><void * *>
_TEXT	ENDS
PUBLIC	??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'Ex48::HeapManager::gen'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
	call	??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'Ex48::HeapManager::gen''
text$yd	ENDS
PUBLIC	??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >
PUBLIC	?_Tidy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\vector
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXXZ ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >
__ehhandler$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXXZ PROC ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@2

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXPAPAVGeneration@Ex48@@0@Z ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAVGeneration@Ex48@@@std@@QAEXPAPAVGeneration@Ex48@@I@Z ; std::allocator<Ex48::Generation *>::deallocate
$LN1@Tidy@2:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@IAEXXZ ENDP ; std::vector<Ex48::Generation *,std::allocator<Ex48::Generation *> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0PAVGeneration@Ex48@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVGeneration@Ex48@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><Ex48::Generation *>

; 455  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@5
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@5:
	DD	1
	DD	$LN6@Vector_val@5
$LN6@Vector_val@5:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@5
$LN4@Vector_val@5:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >::~_Vector_val<Ex48::Generation *,std::allocator<Ex48::Generation *> >
PUBLIC	??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::vector<void * *,std::allocator<void * *> >::~vector<void * *,std::allocator<void * *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fstack@Ex48@@YAXXZ
text$yd	SEGMENT
??__Fstack@Ex48@@YAXXZ PROC				; Ex48::`dynamic atexit destructor for 'stack'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
	call	??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::vector<void * *,std::allocator<void * *> >::~vector<void * *,std::allocator<void * *> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fstack@Ex48@@YAXXZ ENDP				; Ex48::`dynamic atexit destructor for 'stack''
text$yd	ENDS
PUBLIC	??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::_Vector_val<void * *,std::allocator<void * *> >::~_Vector_val<void * *,std::allocator<void * *> >
PUBLIC	?_Tidy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXXZ ; std::vector<void * *,std::allocator<void * *> >::_Tidy
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ PROC ; std::vector<void * *,std::allocator<void * *> >::~vector<void * *,std::allocator<void * *> >, COMDAT
; _this$ = ecx

; 704  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 705  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXXZ ; std::vector<void * *,std::allocator<void * *> >::_Tidy

; 706  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::_Vector_val<void * *,std::allocator<void * *> >::~_Vector_val<void * *,std::allocator<void * *> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ; std::_Vector_val<void * *,std::allocator<void * *> >::~_Vector_val<void * *,std::allocator<void * *> >
__ehhandler$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ENDP ; std::vector<void * *,std::allocator<void * *> >::~vector<void * *,std::allocator<void * *> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Tidy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Tidy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXXZ PROC ; std::vector<void * *,std::allocator<void * *> >::_Tidy, COMDAT
; _this$ = ecx

; 1301 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 : 		if (this->_Myfirst != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Tidy@3

; 1303 : 			{	// something to free, destroy and deallocate it
; 1304 : 			this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1305 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXPAPAPAX0@Z ; std::vector<void * *,std::allocator<void * *> >::_Destroy

; 1306 : 			this->_Alval.deallocate(this->_Myfirst,
; 1307 : 				this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?deallocate@?$allocator@PAPAX@std@@QAEXPAPAPAXI@Z ; std::allocator<void * *>::deallocate
$LN1@Tidy@3:

; 1308 : 			}
; 1309 : 		this->_Myfirst = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1310 : 		this->_Mylast = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1311 : 		this->_Myend = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1312 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@IAEXXZ ENDP ; std::vector<void * *,std::allocator<void * *> >::_Tidy
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ$0
__ehfuncinfo$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Alproxy$ = -29					; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ PROC ; std::_Vector_val<void * *,std::allocator<void * *> >::~_Vector_val<void * *,std::allocator<void * *> >, COMDAT
; _this$ = ecx

; 452  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 453  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 454  : 			_Alproxy(_Alval);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$?0PAPAX@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAPAX@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><void * *>

; 455  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 456  : 		_Dest_val(_Alproxy, this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Dest_val@V?$allocator@U_Container_proxy@std@@@std@@U_Container_proxy@2@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@PAU_Container_proxy@0@@Z ; std::_Dest_val<std::allocator<std::_Container_proxy>,std::_Container_proxy>
	add	esp, 8

; 457  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 458  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 459  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Vector_val@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Vector_val@6:
	DD	1
	DD	$LN6@Vector_val@6
$LN6@Vector_val@6:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@Vector_val@6
$LN4@Vector_val@6:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ$0:
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_val@PAPAXV?$allocator@PAPAX@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<void * *,std::allocator<void * *> >::~_Vector_val<void * *,std::allocator<void * *> >
PUBLIC	?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A ; Ex48::HeapManager::gen
PUBLIC	?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A ; Ex48::stack
_BSS	SEGMENT
	ALIGN	4

?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A DB 014H DUP (?) ; Ex48::HeapManager::gen
?stack@Ex48@@3V?$vector@PAPAXV?$allocator@PAPAX@std@@@std@@A DB 014H DUP (?) ; Ex48::stack
_BSS	ENDS
CRT$XCU	SEGMENT
?gen$initializer$@HeapManager@Ex48@@2P6AXXZA DD FLAT:??__E?gen@HeapManager@Ex48@@2V?$vector@PAVGeneration@Ex48@@V?$allocator@PAVGeneration@Ex48@@@std@@@std@@A@@YAXXZ ; Ex48::HeapManager::gen$initializer$
_stack$initializer$ DD FLAT:??__Estack@Ex48@@YAXXZ
CRT$XCU	ENDS
END
